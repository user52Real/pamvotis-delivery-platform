================================================================
File Summary
================================================================


File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line



================================================================
Repository Structure
================================================================
lib/
  assistantMethods/
    address_changer.dart
    assistant_methods.dart
    cart_item_counter.dart
    total_amount.dart
  authentication/
    auth_screen.dart
    forgot_password.dart
    login.dart
    register.dart
  core/
    network_info.dart
    result.dart
  global/
    global.dart
    navigation_service.dart
  l10n/
    app_el.arb
    app_en.arb
  mainScreens/
    address_screen.dart
    cart_screen.dart
    history_screen.dart
    home_screen.dart
    item_detail_screen.dart
    items_screen.dart
    menus_screen.dart
    my_orders_screen.dart
    order_details_screen.dart
    placed_order_screen.dart
    save_address_screen.dart
    search_screen.dart
  maps/
    maps.dart
  models/
    address.dart
    items.dart
    loyalty.dart
    menus.dart
    operation.dart
    promotion.dart
    review.dart
    sellers.dart
    user_model.dart
  repositories/
    auth_repository.dart
    base_repository.dart
    user_repository.dart
  services/
    storage/
      storage_service_factory.dart
      storage_service.dart
      web_storage_service.dart
    delivery_scheduler.dart
    dynamic_pricing_service.dart
    loyalty_service.dart
    notification_service.dart
    payment_service.dart
    promotion_service.dart
    secure_storage.dart
    session_service.dart
  splashScreen/
    splash_screen.dart
  utils/
    firebase_error_handler.dart
    input_validator.dart
    password_validator.dart
    rate_limiter.dart
  widgets/
    address_design.dart
    app_bar.dart
    cart_item_design.dart
    custom_text_field.dart
    error_dialog.dart
    items_design.dart
    loading_dialog.dart
    menus_design.dart
    my_drawer.dart
    order_card.dart
    progress_bar.dart
    review_dialog.dart
    sellers_design.dart
    shipment_address_design.dart
    simple_app_bar.dart
    status_banner.dart
    text_field.dart
    text_widget_header.dart
  main.dart
test/
  widget_test.dart
web/
  index.html
  manifest.json
.gitignore
.metadata
analysis_options.yaml
l10n.yaml
pubspec.lock
pubspec.yaml
README.md

================================================================
Repository Files
================================================================

================
File: lib/assistantMethods/address_changer.dart
================
import 'package:flutter/cupertino.dart';

class AddressChanger extends ChangeNotifier{
  int _counter = 0;
  int get count => _counter;

  displayResult(dynamic newValue){
    _counter = newValue;
    notifyListeners();
  }
}

================
File: lib/assistantMethods/assistant_methods.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import '/assistantMethods/cart_item_counter.dart';
import '/global/global.dart';
import 'package:provider/provider.dart';


separateOrderItemIDs(orderIDs){
  List<String> separateItemIDsList=[], defaultItemList=[];
  int i=0;

  defaultItemList = List<String>.from(orderIDs);

  for(i; i<defaultItemList.length; i++){
    String item = defaultItemList[i].toString();
    var pos = item.lastIndexOf(":");

    String getItemId = (pos != -1) ? item.substring(0, pos) : item;

    print("\nThis is itemID now = " + getItemId);

    separateItemIDsList.add(getItemId);
  }

  print("\nThis is Items List now = ");
  print(separateItemIDsList);

  return separateItemIDsList;
}

separateItemIDs(){
  List<String> separateItemIDsList=[], defaultItemList=[];
  int i=0;

  defaultItemList = sharedPreferences!.getStringList("userCart")!;

  for(i; i<defaultItemList.length; i++){
    String item = defaultItemList[i].toString();
    var pos = item.lastIndexOf(":");
    String getItemId = (pos != -1) ? item.substring(0, pos) : item;

    print("\nThis is itemID now = " + getItemId);

    separateItemIDsList.add(getItemId);
  }

  print("\nThis is Items List now = ");
  print(separateItemIDsList);

  return separateItemIDsList;
}

addItemToCart(String? foodItemId, BuildContext context, int itemCounter) {
  List<String>? tempList = sharedPreferences!.getStringList("userCart");
  tempList!.add("${foodItemId!}:$itemCounter");

  FirebaseFirestore.instance
      .collection("users")
      .doc(firebaseAuth.currentUser!.uid)
      .update({
    "userCart": tempList,
  }).then((value) {
    sharedPreferences!.setStringList("userCart", tempList);
    // Update cart counter
    Provider.of<CartItemCounter>(context, listen: false)
        .displayCartListItemsNumber();
  });
}

separateOrderItemQuantities(orderIDs){
  List<String> separateItemQuantityList=[];
  List<String> defaultItemList=[];
  int i=1;

  defaultItemList = List<String>.from(orderIDs);

  for(i; i<defaultItemList.length; i++){
    String item = defaultItemList[i].toString();

    List<String> listItemCharacters = item.split(":").toList();
    var quanNumber = int.parse(listItemCharacters[1].toString());

    print("\nThis is Quantity number = " + quanNumber.toString());

    separateItemQuantityList.add(quanNumber.toString());
  }

  print("\nThis is Quantity List now = ");
  print(separateItemQuantityList);

  return separateItemQuantityList;
}

separateItemQuantities(){
  List<int> separateItemQuantityList=[];
  List<String> defaultItemList=[];
  int i=1;

  defaultItemList = sharedPreferences!.getStringList("userCart")!;

  for(i; i<defaultItemList.length; i++){
    String item = defaultItemList[i].toString();

    List<String> listItemCharacters = item.split(":").toList();
    var quanNumber = int.parse(listItemCharacters[1].toString());

    print("\nThis is Quantity number = " + quanNumber.toString());

    separateItemQuantityList.add(quanNumber);
  }

  print("\nThis is Quantity List now = ");
  print(separateItemQuantityList);

  return separateItemQuantityList;
}

clearCartNow(context) {
  sharedPreferences!.setStringList("userCart", ['garbageValue']);
  List<String>? emptyList = sharedPreferences!.getStringList("userCart");

  FirebaseFirestore.instance
      .collection("users")
      .doc(firebaseAuth.currentUser!.uid)
      .update({
    "userCart": emptyList,
  }).then((value) {
    sharedPreferences!.setStringList("userCart", emptyList!);
    Provider.of<CartItemCounter>(context, listen: false)
        .displayCartListItemsNumber();
  });
}

================
File: lib/assistantMethods/cart_item_counter.dart
================
import 'package:flutter/material.dart';

import '../global/global.dart';

class CartItemCounter extends ChangeNotifier {
  int _cartListItemCounter = 0;

  CartItemCounter() {
    // Initialize counter in constructor
    _cartListItemCounter = _getCartCount();
  }

  int get count => _cartListItemCounter;

  int _getCartCount() {
    var cartList = sharedPreferences!.getStringList("userCart");
    if (cartList == null || cartList.isEmpty) {
      return 0;
    }
    // Subtract 1 to account for the 'garbageValue'
    return cartList.length - 1;
  }

  void displayCartListItemsNumber() {
    _cartListItemCounter = _getCartCount();
    notifyListeners();
  }
}

================
File: lib/assistantMethods/total_amount.dart
================
import 'package:flutter/cupertino.dart';

class TotalAmount extends ChangeNotifier {
  double _totalAmount = 0;

  double get tAmount => _totalAmount;

  displayTotalAmount(double number) async {
    _totalAmount =  number;

    await Future.delayed(const Duration(milliseconds: 100), (){
      notifyListeners();
    });
  }
}

================
File: lib/authentication/auth_screen.dart
================
import 'package:flutter/material.dart';
import 'login.dart';
import 'register.dart';

class AuthScreen extends StatefulWidget {
  const AuthScreen({super.key});

  @override
  State<AuthScreen> createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> {
  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: _buildResponsiveAppBar(),
        body: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topRight,
              end: Alignment.bottomLeft,
              colors: [
                Colors.blue.shade400,
                Colors.blue.shade600,
              ],
            ),
          ),
          child: Center(
            child: Container(
              margin: const EdgeInsets.all(20),
              constraints: const BoxConstraints(
                maxWidth: 500,  // Fixed maximum width
                maxHeight: 800, // Fixed maximum height
              ),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(15),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    spreadRadius: 5,
                    blurRadius: 7,
                    offset: const Offset(0, 3),
                  ),
                ],
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(15),
                child: _buildResponsiveContent(),
              ),
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildResponsiveAppBar() {
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 600;

    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
            stops: const [0.0, 1.0],
            tileMode: TileMode.clamp,
          ),
        ),
      ),
      automaticallyImplyLeading: false,
      title: MouseRegion(
        cursor: SystemMouseCursors.click,
        child: Text(
          "Pamvotis",
          style: TextStyle(
            fontSize: isSmallScreen ? 30 : 50,
            color: Colors.white,
            fontFamily: "Lexend",
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      centerTitle: true,
      elevation: 0,
      bottom: PreferredSize(
        preferredSize: const Size.fromHeight(60),
        child: _buildTabBar(),
      ),
    );
  }

  Widget _buildTabBar() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(25),
        color: Colors.white.withOpacity(0.1),
      ),
      child: TabBar(
        tabs: [
          _buildTab(Icons.lock, "Login"),
          _buildTab(Icons.person, "Register"),
        ],
        indicator: BoxDecoration(
          borderRadius: BorderRadius.circular(25),
          color: Colors.white.withOpacity(0.2),
        ),
        labelStyle: const TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 16,
        ),
        unselectedLabelStyle: const TextStyle(
          fontWeight: FontWeight.normal,
          fontSize: 16,
        ),
        labelColor: Colors.white,
        unselectedLabelColor: Colors.white70,
      ),
    );
  }

  Widget _buildTab(IconData icon, String label) {
    return Tab(
      height: 50,
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon),
          const SizedBox(width: 8),
          Text(label),
        ],
      ),
    );
  }

  Widget _buildResponsiveContent() {
    return const TabBarView(
      children: [
        SingleChildScrollView(
          child: Padding(
            padding: EdgeInsets.all(20),
            child: LoginScreen(),
          ),
        ),
        SingleChildScrollView(
          child: Padding(
            padding: EdgeInsets.all(20),
            child: RegisterScreen(),
          ),
        ),
      ],
    );
  }
}

================
File: lib/authentication/forgot_password.dart
================
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '/global/global.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/error_dialog.dart';
import '../widgets/loading_dialog.dart';

class ForgotPasswordScreen extends StatefulWidget {
  const ForgotPasswordScreen({Key? key}) : super(key: key);

  @override
  _ForgotPasswordScreenState createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final TextEditingController _emailController = TextEditingController();

  void resetPassword() async {
    if (_emailController.text.isNotEmpty) {
      showDialog(
        context: context,
        builder: (c) {
          return LoadingDialog(
            message: "Sending reset email...",
          );
        },
      );

      try {
        await FirebaseAuth.instance.sendPasswordResetEmail(
          email: _emailController.text.trim(),
        );
        Navigator.pop(context); // Dismiss loading dialog
        showDialog(
          context: context,
          builder: (c) {
            return AlertDialog(
              title: const Text("Password Reset"),
              content: const Text("A password reset link has been sent to your email."),
              actions: [
                TextButton(
                  child: const Text("OK"),
                  onPressed: () {
                    firebaseAuth.sendPasswordResetEmail(email: _emailController.text);
                    Navigator.pop(context); // Return to login screen
                  },
                ),
              ],
            );
          },
        );
      } catch (error) {
        Navigator.pop(context); // Dismiss loading dialog
        showDialog(
          context: context,
          builder: (c) {
            return ErrorDialog(
              message: error.toString(),
            );
          },
        );
      }
    } else {
      showDialog(
        context: context,
        builder: (c) {
          return ErrorDialog(
            message: "Please enter your email address.",
          );
        },
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Forgot Password"),
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Colors.blue, Colors.blue],
              begin: FractionalOffset(0.0, 0.0),
              end: FractionalOffset(1.0, 0.0),
              stops: [0.0, 1.0],
              tileMode: TileMode.clamp,
            ),
          ),
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topRight,
            end: Alignment.bottomLeft,
            colors: [Colors.blue, Colors.blue],
          ),
        ),
        child: Center(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  CustomTextField(
                    data: Icons.email,
                    controller: _emailController,
                    hintText: "Email",
                    isObsecre: false,
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.yellow,
                      padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 10),
                    ),
                    onPressed: resetPassword,
                    child: const Text(
                      "Reset Password",
                      style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

================
File: lib/authentication/login.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import '../models/user_model.dart';
import '../utils/rate_limiter.dart';
import '/global/global.dart';
import '/mainScreens/home_screen.dart';
import '/widgets/custom_text_field.dart';
import '/widgets/error_dialog.dart';
import '/widgets/loading_dialog.dart';
import 'forgot_password.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();

  Future<void> formValidation() async {
    if (emailController.text.isNotEmpty && passwordController.text.isNotEmpty) {
      await loginNow();
    } else {
      showDialog(
        context: context,
        builder: (c) => ErrorDialog(
          message: "Please write email/password",
        ),
      );
    }
  }

  Future<void> loginNow() async {
    if (!RateLimiter.shouldAllowLogin(emailController.text)) {
      final remainingTime = RateLimiter.getRemainingLockoutTime(emailController.text);
      showDialog(
        context: context,
        builder: (c) => ErrorDialog(
          message: "Too many login attempts. Please try again in ${remainingTime!.inMinutes} minutes.",
        ),
      );
      return;
    }
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (c) => LoadingDialog(
        message: "Checking Credentials",
      ),
    );

    try {
      // Attempt login
      final userCredential = await firebaseAuth.signInWithEmailAndPassword(
        email: emailController.text.trim(),
        password: passwordController.text.trim(),
      );

      // Check if login was successful
      if (userCredential.user == null) {
        throw Exception('Login failed - no user returned');
      }

      await readDataAndSetDataLocally(userCredential.user!);
      UserSession.updateLastActivity();
    } catch (error) {
      if (!mounted) return;
      Navigator.pop(context);
      showDialog(
        context: context,
        builder: (c) => ErrorDialog(message: error.toString()),
      );
    }
  }

  Future<void> readDataAndSetDataLocally(User currentUser) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection("users")
          .doc(currentUser.uid)
          .get();

      if (!snapshot.exists || snapshot.data() == null) {
        throw Exception('User data not found');
      }

      final userModel = UserModel.fromFirestore(snapshot.data()!);

      // Check user status
      if (userModel.status != "approved") {
        await firebaseAuth.signOut();
        throw Exception('Account blocked by admin. Please contact support.');
      }

      // Save to SharedPreferences
      await sharedPreferences!.setString("uid", userModel.uid);
      await sharedPreferences!.setString("email", userModel.email);
      await sharedPreferences!.setString("name", userModel.name);
      await sharedPreferences!.setString("photoUrl", userModel.photoUrl);
      await sharedPreferences!.setStringList("userCart", userModel.userCart);

      if (!mounted) return;
      Navigator.pop(context);
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (c) => const HomeScreen()),
      );
    } catch (error) {
      if (!mounted) return;
      Navigator.pop(context);
      showDialog(
        context: context,
        builder: (c) => ErrorDialog(message: error.toString()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        // Logo
        Container(
          constraints: const BoxConstraints(maxHeight: 120),
          child: Image.asset(
            "images/logo.png",
            fit: BoxFit.contain,
          ),
        ),
        const SizedBox(height: 20),

        // Form
        Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CustomTextField(
                data: Icons.email,
                controller: emailController,
                hintText: "Email",
                isObsecre: false,
              ),
              const SizedBox(height: 10),
              CustomTextField(
                data: Icons.lock,
                controller: passwordController,
                hintText: "Password",
                isObsecre: true,
              ),
            ],
          ),
        ),
        const SizedBox(height: 20),

        // Login Button
        SizedBox(
          width: double.infinity,
          child: ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              padding: const EdgeInsets.symmetric(vertical: 15),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            onPressed: formValidation,
            child: const Text(
              "Login",
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
        const SizedBox(height: 10),

        // Forgot Password Button
        TextButton(
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (c) => const ForgotPasswordScreen()),
            );
          },
          child: const Text(
            "Forgot Password?",
            style: TextStyle(
              color: Colors.blue,
              fontSize: 14,
            ),
          ),
        ),
      ],
    );
  }

  @override
  void dispose() {
    emailController.dispose();
    passwordController.dispose();
    super.dispose();
  }
}

================
File: lib/authentication/register.dart
================
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_storage/firebase_storage.dart' as f_storage;
import '../models/user_model.dart';
import '/global/global.dart';
import '/mainScreens/home_screen.dart';
import '/widgets/custom_text_field.dart';
import '/widgets/error_dialog.dart';
import '/widgets/loading_dialog.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'auth_screen.dart';

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({super.key});

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  TextEditingController nameController = TextEditingController();
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();
  TextEditingController confirmPasswordController = TextEditingController();

  XFile? imageXFile;
  Uint8List? webImage;
  final ImagePicker _picker = ImagePicker();
  String sellerImageUrl = "";

  Future<void> _getImage() async {
    if (kIsWeb) {
      final XFile? image = await _picker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 512,
        maxHeight: 512,
      );
      if (image != null) {
        var f = await image.readAsBytes();
        setState(() {
          webImage = f;
          imageXFile = image;
        });
      }
    } else {
      final XFile? image = await _picker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 512,
        maxHeight: 512,
      );
      if (image != null) {
        setState(() {
          imageXFile = image;
        });
      }
    }
  }

  Future<void> formValidation() async {
    if (imageXFile == null) {
      showDialog(
          context: context,
          builder: (c) {
            return ErrorDialog(
              message: "Please select an image",
            );
          }
      );
      return;
    }

    if (passwordController.text != confirmPasswordController.text) {
      showDialog(
          context: context,
          builder: (c) {
            return ErrorDialog(
              message: "Passwords do not match.",
            );
          }
      );
      return;
    }

    if (confirmPasswordController.text.isNotEmpty &&
        emailController.text.isNotEmpty &&
        nameController.text.isNotEmpty) {
      showDialog(
          context: context,
          barrierDismissible: false,
          builder: (c) {
            return LoadingDialog(
              message: "Registering Account",
            );
          }
      );

      await uploadImageAndRegister();
    } else {
      showDialog(
          context: context,
          builder: (c) {
            return ErrorDialog(
              message: "Please fill all the required fields.",
            );
          }
      );
    }
  }

  Future<void> uploadImageAndRegister() async {
    try {
      String fileName = DateTime.now().millisecondsSinceEpoch.toString();
      f_storage.Reference reference = f_storage.FirebaseStorage.instance
          .ref()
          .child("users")
          .child(fileName);

      f_storage.UploadTask uploadTask;
      if (kIsWeb) {
        uploadTask = reference.putData(webImage!);
      } else {
        uploadTask = reference.putFile(File(imageXFile!.path));
      }

      f_storage.TaskSnapshot taskSnapshot = await uploadTask;
      sellerImageUrl = await taskSnapshot.ref.getDownloadURL();

      // Register user
      await authenticateAndRegister();
    } catch (e) {
      Navigator.pop(context);
      showDialog(
          context: context,
          builder: (c) {
            return ErrorDialog(
              message: e.toString(),
            );
          }
      );
    }
  }

  Future<void> authenticateAndRegister() async {
    try {
      UserCredential userCredential = await firebaseAuth.createUserWithEmailAndPassword(
        email: emailController.text.trim(),
        password: passwordController.text.trim(),
      );

      if (userCredential.user != null) {
        // Send email verification
        await userCredential.user!.sendEmailVerification();

        await saveDataToFirestore(userCredential.user!);

        // Show verification dialog
        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (c) => AlertDialog(
            title: const Text('Verify Your Email'),
            content: const Text(
                'A verification email has been sent to your email address. Please verify your email before continuing.'
            ),
            actions: [
              TextButton(
                child: const Text('OK'),
                onPressed: () {
                  Navigator.pop(context);
                  firebaseAuth.signOut();
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (c) => const AuthScreen()),
                  );
                },
              ),
            ],
          ),
        );
      }
    } catch (error) {
      Navigator.pop(context);
      showDialog(
          context: context,
          builder: (c) {
            return ErrorDialog(
              message: error.toString(),
            );
          }
      );
    }
  }

  Future<void> saveDataToFirestore(User currentUser) async {
    final userModel = UserModel(
      uid: currentUser.uid,
      email: currentUser.email ?? '',
      name: nameController.text.trim(),
      photoUrl: sellerImageUrl,
      status: "approved",
    );

    // Save to Firestore
    await FirebaseFirestore.instance
        .collection("users")
        .doc(currentUser.uid)
        .set(userModel.toFirestore());

    // Save locally
    sharedPreferences = await SharedPreferences.getInstance();
    await sharedPreferences!.setString("uid", currentUser.uid);
    await sharedPreferences!.setString("email", currentUser.email ?? '');
    await sharedPreferences!.setString("name", nameController.text.trim());
    await sharedPreferences!.setString("photoUrl", sellerImageUrl);
    await sharedPreferences!.setStringList("userCart", ['garbageValue']);
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          constraints: const BoxConstraints(maxHeight: 120),
          child: Image.asset(
            "images/logo.png",
            fit: BoxFit.contain,
          ),
        ),
        const SizedBox(height: 20),
        // Profile Image Picker
        InkWell(
          onTap: _getImage,
          child: Container(
            decoration: BoxDecoration(
              color: Colors.grey[200],
              shape: BoxShape.circle,
            ),
            padding: const EdgeInsets.all(2),
            child: CircleAvatar(
              radius: 45,
              backgroundColor: Colors.white,
              backgroundImage: _getImageProvider(),
              child: _buildImagePlaceholder(),
            ),
          ),
        ),
        const SizedBox(height: 20),

        // Form
        Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CustomTextField(
                data: Icons.person,
                controller: nameController,
                hintText: "Name",
                isObsecre: false,
              ),
              const SizedBox(height: 10),
              CustomTextField(
                data: Icons.email,
                controller: emailController,
                hintText: "Email",
                isObsecre: false,
              ),
              const SizedBox(height: 10),
              CustomTextField(
                data: Icons.lock,
                controller: passwordController,
                hintText: "Password",
                isObsecre: true,
              ),
              const SizedBox(height: 10),
              CustomTextField(
                data: Icons.lock,
                controller: confirmPasswordController,
                hintText: "Confirm Password",
                isObsecre: true,
              ),
            ],
          ),
        ),
        const SizedBox(height: 20),

        // Register Button
        SizedBox(
          width: double.infinity,
          child: ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              padding: const EdgeInsets.symmetric(vertical: 15),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            onPressed: formValidation,
            child: const Text(
              "Register",
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ],
    );
  }

  ImageProvider? _getImageProvider() {
    if (kIsWeb) {
      if (webImage != null) {
        return MemoryImage(webImage!);
      }
    } else {
      if (imageXFile != null) {
        return FileImage(File(imageXFile!.path));
      }
    }
    return null;
  }

  Widget? _buildImagePlaceholder() {
    if ((kIsWeb && webImage == null) || (!kIsWeb && imageXFile == null)) {
      return const Icon(
        Icons.add_photo_alternate,
        size: 40,
        color: Colors.grey,
      );
    }
    return null;
  }

  @override
  void dispose() {
    nameController.dispose();
    emailController.dispose();
    passwordController.dispose();
    confirmPasswordController.dispose();
    super.dispose();
  }
}

================
File: lib/core/network_info.dart
================
import 'package:connectivity_plus/connectivity_plus.dart';

class NetworkInfo {
  final Connectivity _connectivity;

  NetworkInfo([Connectivity? connectivity])
      : _connectivity = connectivity ?? Connectivity();

  Future<bool> get isConnected async {
    final result = await _connectivity.checkConnectivity();
    return result != ConnectivityResult.none;
  }
}

================
File: lib/core/result.dart
================
class Result<T> {
  final T? data;
  final String? error;
  final bool isSuccess;

  Result.success(this.data) : error = null, isSuccess = true;
  Result.failure(this.error) : data = null, isSuccess = false;

  bool get isFailure => !isSuccess;
}

================
File: lib/global/global.dart
================
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';

SharedPreferences? sharedPreferences;
FirebaseAuth firebaseAuth = FirebaseAuth.instance;


class UserSession {
  static const int sessionTimeoutMinutes = 30;
  static DateTime? _lastActivity;

  static void updateLastActivity() {
    _lastActivity = DateTime.now();
  }

  static bool isSessionValid() {
    if (_lastActivity == null) return false;

    final difference = DateTime.now().difference(_lastActivity!);
    return difference.inMinutes < sessionTimeoutMinutes;
  }

  static Future<void> clearSession() async {
    await firebaseAuth.signOut();
    await sharedPreferences!.clear();
    _lastActivity = null;
  }
}

================
File: lib/global/navigation_service.dart
================
import 'package:flutter/material.dart';

import '../mainScreens/home_screen.dart';

final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

class NavigationService {
  static Future<void> navigateBack(BuildContext context) async {
    if (Navigator.canPop(context)) {
      Navigator.pop(context);
    } else {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (c) => const HomeScreen()),
      );
    }
  }
}

================
File: lib/l10n/app_el.arb
================
{
  "@@locale": "el",
  "appTitle": "Διανομή Φαγητού",
  "home": "Αρχική",
  "orders": "Παραγγελίες",
  "profile": "Προφίλ",
  "searchHint": "Αναζήτηση εστιατορίων ή πιάτων",

  "auth_login": "Σύνδεση",
  "auth_register": "Εγγραφή",
  "auth_email": "Email",
  "auth_password": "Κωδικός",
  "auth_confirmPassword": "Επιβεβαίωση Κωδικού",
  "auth_forgotPassword": "Ξεχάσατε τον κωδικό;",
  "auth_name": "Όνομα",
  "auth_phoneNumber": "Τηλέφωνο",

  "orderStatus_pending": "Σε εκκρεμότητα",
  "orderStatus_confirmed": "Επιβεβαιώθηκε",
  "orderStatus_preparing": "Σε προετοιμασία",
  "orderStatus_onTheWay": "Καθ'οδόν",
  "orderStatus_delivered": "Παραδόθηκε",

  "cart_empty": "Το καλάθι σας είναι άδειο",
  "cart_subtotal": "Μερικό σύνολο",
  "cart_deliveryFee": "Έξοδα αποστολής",
  "cart_total": "Σύνολο",
  "cart_checkout": "Ολοκλήρωση παραγγελίας",
  "cart_addToCart": "Προσθήκη στο καλάθι",

  "reviews_title": "Κριτικές",
  "reviews_writeReview": "Γράψτε μια κριτική",
  "reviews_rating": "Βαθμολογία",
  "reviews_comment": "Σχόλιο",
  "reviews_submit": "Υποβολή",
  "reviews_noReviews": "Δεν υπάρχουν κριτικές ακόμα",

  "notifications_orderConfirmed": "Η παραγγελία σας επιβεβαιώθηκε",
  "notifications_orderPreparing": "Η παραγγελία σας ετοιμάζεται",
  "notifications_orderOnWay": "Η παραγγελία σας είναι καθ'οδόν",
  "notifications_orderDelivered": "Η παραγγελία σας παραδόθηκε",
  "notifications_newPromotion": "Νέα προσφορά διαθέσιμη!",

  "errors_generalError": "Κάτι πήγε στραβά",
  "errors_networkError": "Πρόβλημα σύνδεσης",
  "errors_loginError": "Λάθος email ή κωδικός",
  "errors_registrationError": "Η εγγραφή απέτυχε",
  "errors_addressError": "Παρακαλώ εισάγετε έγκυρη διεύθυνση"
}

================
File: lib/l10n/app_en.arb
================
{
  "@@locale": "en",
  "appTitle": "Food Delivery",
  "home": "Home",
  "orders": "Orders",
  "profile": "Profile",
  "searchHint": "Search for restaurants or dishes",

  "auth_login": "Login",
  "auth_register": "Register",
  "auth_email": "Email",
  "auth_password": "Password",
  "auth_confirmPassword": "Confirm Password",
  "auth_forgotPassword": "Forgot Password?",
  "auth_name": "Name",
  "auth_phoneNumber": "Phone Number",

  "orderStatus_pending": "Pending",
  "orderStatus_confirmed": "Confirmed",
  "orderStatus_preparing": "Preparing",
  "orderStatus_onTheWay": "On the way",
  "orderStatus_delivered": "Delivered",

  "cart_empty": "Your cart is empty",
  "cart_subtotal": "Subtotal",
  "cart_deliveryFee": "Delivery Fee",
  "cart_total": "Total",
  "cart_checkout": "Checkout",
  "cart_addToCart": "Add to Cart",

  "reviews_title": "Reviews",
  "reviews_writeReview": "Write a Review",
  "reviews_rating": "Rating",
  "reviews_comment": "Comment",
  "reviews_submit": "Submit",
  "reviews_noReviews": "No reviews yet",

  "notifications_orderConfirmed": "Your order has been confirmed",
  "notifications_orderPreparing": "Your order is being prepared",
  "notifications_orderOnWay": "Your order is on the way",
  "notifications_orderDelivered": "Your order has been delivered",
  "notifications_newPromotion": "New promotion available!",

  "errors_generalError": "Something went wrong",
  "errors_networkError": "Network error",
  "errors_loginError": "Invalid email or password",
  "errors_registrationError": "Registration failed",
  "errors_addressError": "Please enter a valid address"
}

================
File: lib/mainScreens/address_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '../services/payment_service.dart';
import '../widgets/loading_dialog.dart';
import '../widgets/error_dialog.dart';
import '/assistantMethods/address_changer.dart';
import '/global/global.dart';
import '/mainScreens/save_address_screen.dart';
import '/models/address.dart';
import '/widgets/address_design.dart';
import '/widgets/progress_bar.dart';
import 'package:provider/provider.dart';

class AddressScreen extends StatefulWidget {
  final double? totalAmount;
  final String? sellerUID;
  final String? paymentMethod;

  AddressScreen({
    this.totalAmount,
    this.sellerUID,
    this.paymentMethod = "cash_on_delivery",
  });

  @override
  State<AddressScreen> createState() => _AddressScreenState();
}

class _AddressScreenState extends State<AddressScreen> {
  PaymentMethod _selectedPaymentMethod = PaymentMethod.cash;

  Widget _buildPaymentMethodSelector() {
    return Container(
      padding: const EdgeInsets.all(16),
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 1),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Select Payment Method",
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
            ),
          ),
          const SizedBox(height: 8),
          RadioListTile<PaymentMethod>(
            title: const Text('Cash on Delivery'),
            value: PaymentMethod.cash,
            groupValue: _selectedPaymentMethod,
            onChanged: (PaymentMethod? value) {
              setState(() {
                _selectedPaymentMethod = value!;
              });
            },
          ),
          RadioListTile<PaymentMethod>(
            title: const Text('Pay with Card'),
            value: PaymentMethod.stripe,
            groupValue: _selectedPaymentMethod,
            onChanged: (PaymentMethod? value) {
              setState(() {
                _selectedPaymentMethod = value!;
              });
            },
          ),
        ],
      ),
    );
  }

  Future<void> _processPayment() async {
    if (_selectedPaymentMethod == PaymentMethod.stripe) {
      try {
        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (c) => LoadingDialog(message: "Processing Payment"),
        );

        await PaymentService.makeStripePayment(
          totalAmount: widget.totalAmount!,
          context: context,
          onSuccess: () async {
            Navigator.pop(context); // Dismiss loading dialog
            _placeOrder("paid");
          },
        );
      } catch (e) {
        Navigator.pop(context); // Dismiss loading dialog
        showDialog(
          context: context,
          builder: (c) => ErrorDialog(message: e.toString()),
        );
      }
    } else {
      _placeOrder("cash_on_delivery");
    }
  }

  void _placeOrder(String paymentStatus) {
    String orderId = DateTime.now().millisecondsSinceEpoch.toString();

    writeOrderDetailsForUser({
      "addressID": Address.selectedAddress.toString(),
      "totalAmount": widget.totalAmount,
      "orderBy": sharedPreferences!.getString("uid"),
      "productIDs": sharedPreferences!.getStringList("userCart"),
      "paymentStatus": paymentStatus,
      "orderTime": orderId,
      "isSuccess": true,
      "sellerUID": widget.sellerUID,
      "riderUID": "",
      "status": "normal",
      "orderId": orderId,
    });

    writeOrderDetailsForSeller({
      "addressID": Address.selectedAddress.toString(),
      "totalAmount": widget.totalAmount,
      "orderBy": sharedPreferences!.getString("uid"),
      "productIDs": sharedPreferences!.getStringList("userCart"),
      "paymentStatus": paymentStatus,
      "orderTime": orderId,
      "isSuccess": true,
      "sellerUID": widget.sellerUID,
      "riderUID": "",
      "status": "normal",
      "orderId": orderId,
    });
  }

  void writeOrderDetailsForUser(Map<String, dynamic> data) async {
    // Get the payment status based on selected payment method
    String paymentStatus = _selectedPaymentMethod == PaymentMethod.cash
        ? "cash_on_delivery"
        : "paid";

    await FirebaseFirestore.instance
        .collection("users")
        .doc(sharedPreferences!.getString("uid"))
        .collection("orders")
        .doc(data["orderId"])
        .set({
      ...data,
      "paymentStatus": paymentStatus, // Use paymentStatus instead of paymentMethod
    });
  }

  Future<void> writeOrderDetailsForSeller(Map<String, dynamic> data) async {
    // Get the payment status based on selected payment method
    String paymentStatus = _selectedPaymentMethod == PaymentMethod.cash
        ? "cash_on_delivery"
        : "paid";

    await FirebaseFirestore.instance
        .collection("orders")
        .doc(data["orderId"])
        .set({
      ...data,
      "paymentStatus": paymentStatus, // Use paymentStatus instead of paymentMethod
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: AppBar(
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.blue.shade400,
                  Colors.blue.shade600,
                ],
                begin: const FractionalOffset(0.0, 0.0),
                end: const FractionalOffset(1.0, 0.0),
              ),
            ),
          ),
          title: const Text(
            "Pamvotis",
            style: TextStyle(fontSize: 32, fontFamily: "Lexend"),
          ),
          centerTitle: true,
        ),
        floatingActionButton: FloatingActionButton.extended(
          label: const Text(
            "Add New Address",
            style: TextStyle(
              fontFamily: "Lexend",
              color: Colors.black87,
            ),
          ),
          backgroundColor: Colors.yellow,
          icon: const Icon(Icons.add_location, color: Colors.blue),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (c) => SaveAddressScreen()),
            );
          },
        ),
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 1200),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: Column(
              children: [
                const Padding(
                  padding: EdgeInsets.all(20),
                  child: Text(
                    "Select Address",
                    style: TextStyle(
                      color: Colors.black87,
                      fontWeight: FontWeight.bold,
                      fontSize: 24,
                      fontFamily: "Lexend",
                    ),
                  ),
                ),
                Expanded(
                  child: Consumer<AddressChanger>(
                    builder: (context, address, c) {
                      return StreamBuilder<QuerySnapshot>(
                        stream: FirebaseFirestore.instance
                            .collection("users")
                            .doc(sharedPreferences!.getString("uid"))
                            .collection("userAddress")
                            .snapshots(),
                        builder: (context, snapshot) {
                          if (!snapshot.hasData) {
                            return Center(child: circularProgress());
                          }
                          if (snapshot.data!.docs.isEmpty) {
                            return const Center(
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(
                                    Icons.location_off,
                                    size: 70,
                                    color: Colors.grey,
                                  ),
                                  SizedBox(height: 10),
                                  Text(
                                    "No addresses found",
                                    style: TextStyle(
                                      color: Colors.grey,
                                      fontSize: 20,
                                      fontFamily: "Lexend",
                                    ),
                                  ),
                                ],
                              ),
                            );
                          }
                          return ListView.builder(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 20,
                              vertical: 10,
                            ),
                            itemCount: snapshot.data!.docs.length,
                            itemBuilder: (context, index) {
                              return Padding(
                                padding: const EdgeInsets.only(bottom: 10),
                                child: AddressDesign(
                                  currentIndex: address.count,
                                  value: index,
                                  addressId: snapshot.data!.docs[index].id,
                                  totalAmount: widget.totalAmount,
                                  sellerUID: widget.sellerUID,
                                  paymentMethod: widget.paymentMethod,
                                  model: Address.fromJson(
                                    snapshot.data!.docs[index].data()!
                                    as Map<String, dynamic>,
                                  ),
                                ),
                              );
                            },
                          );
                        },
                      );
                    },
                  ),
                ),
                _buildPaymentMethodSelector(),
                Padding(
                  padding: const EdgeInsets.all(20),
                  child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 50,
                        vertical: 15,
                      ),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    onPressed: _processPayment,
                    child: Text(
                      _selectedPaymentMethod == PaymentMethod.cash
                          ? "Place Order (Cash on Delivery)"
                          : "Pay with Card",
                      style: const TextStyle(
                        fontSize: 16,
                        fontFamily: "Lexend",
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

enum PaymentMethod { cash, stripe }

================
File: lib/mainScreens/cart_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:pamvotis_users_web/mainScreens/home_screen.dart';
import '/assistantMethods/assistant_methods.dart';
import '/assistantMethods/cart_item_counter.dart';
import '/assistantMethods/total_amount.dart';
import '/mainScreens/address_screen.dart';
import '/models/items.dart';
import '/splashScreen/splash_screen.dart';
import '/widgets/cart_item_design.dart';
import '/widgets/progress_bar.dart';
import '/widgets/error_dialog.dart';
import '/widgets/loading_dialog.dart';
import '/services/payment_service.dart';
import 'package:provider/provider.dart';

class CartScreen extends StatefulWidget {
  final String? sellerUID;
  CartScreen({this.sellerUID});

  @override
  State<CartScreen> createState() => _CartScreenState();
}

class _CartScreenState extends State<CartScreen> {
  List<int>? separateItemQuantityList;
  num totalAmount = 0;
  PaymentMethod _selectedPaymentMethod = PaymentMethod.cash;

  @override
  void initState() {
    super.initState();
    totalAmount = 0;
    Provider.of<TotalAmount>(context, listen: false).displayTotalAmount(0);
    separateItemQuantityList = separateItemQuantities();
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        return Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topRight,
              end: Alignment.bottomLeft,
              colors: [
                Colors.blue.shade400,
                Colors.blue.shade600,
              ],
            ),
          ),
          child: Scaffold(
            backgroundColor: Colors.transparent,
            appBar: _buildAppBar(),
            body: Center(
              child: Container(
                margin: EdgeInsets.symmetric(
                  horizontal: constraints.maxWidth * 0.05,
                  vertical: 20,
                ),
                constraints: BoxConstraints(
                  maxWidth: 1200,
                  minHeight: constraints.maxHeight * 0.8,
                ),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(15),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.2),
                      spreadRadius: 5,
                      blurRadius: 7,
                      offset: const Offset(0, 3),
                    ),
                  ],
                ),
                child: _buildResponsiveLayout(constraints),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildResponsiveLayout(BoxConstraints constraints) {
    if (constraints.maxWidth > 900) {
      return _buildWideLayout();
    } else {
      return _buildNarrowLayout();
    }
  }

  Widget _buildWideLayout() {
    return Row(
      children: [
        Expanded(
          flex: 2,
          child: Column(
            children: [
              _buildHeader(),
              Expanded(child: _buildCartList()),
            ],
          ),
        ),
        Container(
          width: 2,
          margin: const EdgeInsets.symmetric(vertical: 20),
          color: Colors.grey.shade200,
        ),
        Expanded(
          child: Column(
            children: [
              _buildPaymentMethodSelector(),
              const Spacer(),
              _buildBottomButtons(),
            ],
          ),
        ),
      ],
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => Navigator.pop(context),
      ),
      title: const Text(
        "Pamvotis",
        style: TextStyle(fontSize: 32, fontFamily: "Lexend"),
      ),
      centerTitle: true,
      actions: [_buildCartIcon()],

    );
  }

  Widget _buildCartIcon() {
    return Stack(
      children: [
        IconButton(
          icon: const Icon(Icons.shopping_cart, color: Colors.white),
          onPressed: () {},
        ),
        Positioned(
          right: 8,
          top: 8,
          child: Container(
            padding: const EdgeInsets.all(2),
            decoration: BoxDecoration(
              color: Colors.yellow,
              borderRadius: BorderRadius.circular(10),
            ),
            constraints: const BoxConstraints(
              minWidth: 20,
              minHeight: 20,
            ),
            child: Center(
              child: Consumer<CartItemCounter>(
                builder: (context, counter, _) {
                  return Text(
                    counter.count.toString(),
                    style: const TextStyle(
                      color: Colors.black,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  );
                },
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
      ),
      child: Column(
        children: [
          const Text(
            "Shopping Cart",
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
            ),
          ),
          const SizedBox(height: 10),
          Consumer2<TotalAmount, CartItemCounter>(
            builder: (context, amountProvider, cartProvider, _) {
              return cartProvider.count == 0
                  ? Container()
                  : Text(
                "Total: €${amountProvider.tAmount.toStringAsFixed(2)}",
                style: const TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.w500,
                  fontFamily: "Lexend",
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildNarrowLayout() {
    return Column(
      children: [
        _buildHeader(),
        Expanded(child: _buildCartList()),
        _buildPaymentMethodSelector(),
        _buildBottomButtons(),
      ],
    );
  }

  Widget _buildCartList() {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection("items")
          .where("itemID", whereIn: separateItemIDs())
          .orderBy("publishedDate", descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(child: circularProgress());
        }
        if (snapshot.data!.docs.isEmpty) {
          return _buildEmptyCart();
        }

        return ListView.builder(
          padding: const EdgeInsets.all(20),
          itemCount: snapshot.data!.docs.length,
          itemBuilder: (context, index) {
            Items model = Items.fromJson(
              snapshot.data!.docs[index].data()! as Map<String, dynamic>,
            );

            if (index == 0) {
              totalAmount = model.price! * separateItemQuantityList![index];
            } else {
              totalAmount += model.price! * separateItemQuantityList![index];
            }

            if (index == snapshot.data!.docs.length - 1) {
              WidgetsBinding.instance.addPostFrameCallback((_) {
                Provider.of<TotalAmount>(context, listen: false)
                    .displayTotalAmount(totalAmount.toDouble());
              });
            }

            return CartItemDesign(
              model: model,
              context: context,
              quanNumber: separateItemQuantityList![index],
            );
          },
        );
      },
    );
  }

  Widget _buildEmptyCart() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.shopping_cart_outlined,
            size: 100,
            color: Colors.grey,
          ),
          SizedBox(height: 20),
          Text(
            "Your cart is empty",
            style: TextStyle(
              fontSize: 24,
              color: Colors.grey,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPaymentMethodSelector() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        border: Border(
          top: BorderSide(color: Colors.grey.shade200),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Select Payment Method",
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
            ),
          ),
          RadioListTile<PaymentMethod>(
            title: const Text('Cash on Delivery'),
            value: PaymentMethod.cash,
            groupValue: _selectedPaymentMethod,
            onChanged: (PaymentMethod? value) {
              setState(() {
                _selectedPaymentMethod = value!;
              });
            },
          ),
          RadioListTile<PaymentMethod>(
            title: const Text('Pay with Card'),
            value: PaymentMethod.stripe,
            groupValue: _selectedPaymentMethod,
            onChanged: (PaymentMethod? value) {
              setState(() {
                _selectedPaymentMethod = value!;
              });
            },
          ),
        ],
      ),
    );
  }

  Future<void> _processPayment() async {
    if (_selectedPaymentMethod == PaymentMethod.stripe) {
      try {
        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (c) => LoadingDialog(message: "Processing Payment"),
        );

        await PaymentService.makeStripePayment(
          totalAmount: totalAmount.toDouble(),
          context: context,
          onSuccess: () async {
            Navigator.pop(context); // Dismiss loading dialog
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (c) => AddressScreen(
                  totalAmount: totalAmount.toDouble(),
                  sellerUID: widget.sellerUID,
                  paymentMethod: "paid",
                ),
              ),
            );
          },
        );
      } catch (e) {
        Navigator.pop(context); // Dismiss loading dialog
        showDialog(
          context: context,
          builder: (c) => ErrorDialog(message: e.toString()),
        );
      }
    } else {
      // Cash on delivery
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (c) => AddressScreen(
            totalAmount: totalAmount.toDouble(),
            sellerUID: widget.sellerUID,
            paymentMethod: "cash_on_delivery",
          ),
        ),
      );
    }
  }

  Widget _buildBottomButtons() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: const BorderRadius.vertical(bottom: Radius.circular(15)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, -5),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: ElevatedButton.icon(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red.shade400,
                padding: const EdgeInsets.symmetric(vertical: 15),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              onPressed: () {
                clearCartNow(context);
                Navigator.push(context,
                    MaterialPageRoute(builder: (c) => const HomeScreen()));
                Fluttertoast.showToast(msg: "Cart has been cleared");
              },
              icon: const Icon(Icons.clear_all),
              label: const Text(
                "Clear Cart",
                style: TextStyle(fontSize: 16, fontFamily: "Lexend"),
              ),
            ),
          ),
          const SizedBox(width: 20),
          Expanded(
            child: ElevatedButton.icon(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                padding: const EdgeInsets.symmetric(vertical: 15),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (c) => AddressScreen(
                      totalAmount: totalAmount.toDouble(),
                      sellerUID: widget.sellerUID,
                    ),
                  ),
                );
              },
              icon: const Icon(Icons.shopping_cart_checkout),
              label: const Text(
                "Proceed",
                style: TextStyle(fontSize: 16, fontFamily: "Lexend"),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

enum PaymentMethod { cash, stripe }

================
File: lib/mainScreens/history_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '/assistantMethods/assistant_methods.dart';
import '/global/global.dart';
import '/widgets/order_card.dart';
import '/widgets/progress_bar.dart';

class HistoryScreen extends StatefulWidget {
  @override
  State<HistoryScreen> createState() => _HistoryScreenState();
}

class _HistoryScreenState extends State<HistoryScreen> {
  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: _buildAppBar(),
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 1200),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: Column(
              children: [
                _buildHeader(),
                Expanded(
                  child: _buildOrdersList(),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => Navigator.pop(context),
      ),
      title: const Text(
        "Order History",
        style: TextStyle(
          fontSize: 32,
          fontFamily: "Lexend",
        ),
      ),
      centerTitle: true,
      elevation: 0,
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
      ),
      child: const Row(
        children: [
          Icon(Icons.history, size: 30, color: Colors.blue),
          SizedBox(width: 10),
          Text(
            "Past Orders",
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrdersList() {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection("users")
          .doc(sharedPreferences!.getString("uid"))
          .collection("orders")
          .where("status", isEqualTo: "ended")
          .orderBy("orderTime", descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(child: circularProgress());
        }

        if (snapshot.data!.docs.isEmpty) {
          return _buildEmptyHistory();
        }

        return ListView.builder(
          padding: const EdgeInsets.all(15),
          itemCount: snapshot.data!.docs.length,
          itemBuilder: (context, index) {
            return Padding(
              padding: const EdgeInsets.only(bottom: 10),
              child: FutureBuilder<QuerySnapshot>(
                future: FirebaseFirestore.instance
                    .collection("items")
                    .where(
                  "itemID",
                  whereIn: separateOrderItemIDs(
                    (snapshot.data!.docs[index].data()!
                    as Map<String, dynamic>)["productIDs"],
                  ),
                )
                    .where(
                  "orderBy",
                  whereIn: (snapshot.data!.docs[index].data()!
                  as Map<String, dynamic>)["uid"],
                )
                    .orderBy("publishedDate", descending: true)
                    .get(),
                builder: (context, snap) {
                  if (!snap.hasData) {
                    return Center(child: circularProgress());
                  }

                  return OrderCard(
                    itemCount: snap.data!.docs.length,
                    data: snap.data!.docs,
                    orderID: snapshot.data!.docs[index].id,
                    separateQuantitiesList: separateOrderItemQuantities(
                      (snapshot.data!.docs[index].data()!
                      as Map<String, dynamic>)["productIDs"],
                    ),
                  );
                },
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildEmptyHistory() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.history_outlined,
            size: 100,
            color: Colors.grey.shade400,
          ),
          const SizedBox(height: 20),
          Text(
            "No order history yet",
            style: TextStyle(
              color: Colors.grey.shade600,
              fontSize: 24,
              fontFamily: "Lexend",
            ),
          ),
          const SizedBox(height: 10),
          Text(
            "Your completed orders will appear here",
            style: TextStyle(
              color: Colors.grey.shade500,
              fontSize: 16,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }
}

================
File: lib/mainScreens/home_screen.dart
================
import 'package:carousel_slider/carousel_slider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:provider/provider.dart';
import '../assistantMethods/cart_item_counter.dart';
import '/assistantMethods/assistant_methods.dart';
import '/global/global.dart';
import '/models/sellers.dart';
import '/splashScreen/splash_screen.dart';
import '/widgets/sellers_design.dart';
import '/widgets/my_drawer.dart';
import '/widgets/progress_bar.dart';
import '/mainScreens/menus_screen.dart';
import 'cart_screen.dart'; // Add this import

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with SingleTickerProviderStateMixin {
  int _currentImageIndex = 0;
  late Stream<List<Sellers>> sellersStream;
  late AnimationController _animationController;
  final TextEditingController _searchController = TextEditingController();
  bool _isLoading = false;
  bool _hasError = false;

  @override
  void initState() {
    super.initState();
    restrictBlockedUsers();
    sellersStream = fetchSellers();
    _animationController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);
  }

  @override
  void dispose() {
    _animationController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  Stream<List<Sellers>> fetchSellers() async* {
    while (true) {
      final QuerySnapshot sellersSnapshot = await FirebaseFirestore.instance
          .collection("sellers")
          .get();
      List<Sellers> sellers = sellersSnapshot.docs
          .map((doc) => Sellers.fromJson(doc.data() as Map<String, dynamic>))
          .toList();
      yield sellers;
      await Future.delayed(const Duration(seconds: 5));
    }
  }

  Future<void> restrictBlockedUsers() async {
    try {
      final currentUser = firebaseAuth.currentUser;
      if (currentUser == null) {
        await _handleBlockedUser();
        return;
      }

      final snapshot = await FirebaseFirestore.instance
          .collection("users")
          .doc(currentUser.uid)
          .get();

      if (!mounted) return;

      if (!snapshot.exists || snapshot.data() == null) {
        await _handleBlockedUser();
        return;
      }

      final userData = snapshot.data()!;
      if (userData["status"] != "approved") {
        await _handleBlockedUser();
      } else {
        clearCartNow(context);
      }
    } catch (e) {
      debugPrint("Error checking user status: $e");
      if (!mounted) return;
      await _handleBlockedUser();
    }
  }

  Future<void> _handleBlockedUser() async {
    try {
      Fluttertoast.showToast(
        msg: "You have been blocked by the Administrator",
        webPosition: "center",
        timeInSecForIosWeb: 4,
      );
      await firebaseAuth.signOut();
      if (!mounted) return;
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (c) => const MySplashScreen()),
      );
    } catch (e) {
      debugPrint("Error handling blocked user: $e");
    }
  }

  void _navigateToMenuScreen(Sellers seller) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => MenusScreen(model: seller),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: _buildAppBar(),
      drawer: MediaQuery.of(context).size.width < 800 ? const MyDrawer() : null,
      body: Row(
        children: [
          if (MediaQuery.of(context).size.width >= 800)
            const SizedBox(width: 250, child: MyDrawer()),
          Expanded(child: _buildBody()),
        ],
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.menu),
        onPressed: () {
          Scaffold.of(context).openDrawer();
        },
      ),
      title: const Text(
        "Pamvotis",
        style: TextStyle(
          fontSize: 32,
          fontFamily: "Lexend",
        ),
      ),
      centerTitle: true,
      actions: [
        Padding(
          padding: const EdgeInsets.only(right: 8.0),
          child: _buildCartIcon(),
        ),
      ],
    );
  }

  Widget _buildCartIcon() {
    return Stack(
      clipBehavior: Clip.none, // Allow badge to overflow
      children: [
        IconButton(
          icon: const Icon(
            Icons.shopping_cart,
            color: Colors.white,
            size: 28,
          ),
          onPressed: () {
            // Check if cart is empty
            if (sharedPreferences!.getStringList("userCart")!.length == 1) {
              Fluttertoast.showToast(msg: "Cart is empty");
            } else {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (c) => CartScreen()),
              );
            }
          },
        ),
        Positioned(
          bottom: -8, // Position below the icon
          right: 0,
          left: 0,
          child: Consumer<CartItemCounter>(
            builder: (context, counter, _) {
              return Container(
                padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.red,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: Colors.white,
                    width: 1,
                  ),
                ),
                constraints: const BoxConstraints(
                  minWidth: 16,
                  minHeight: 16,
                ),
                child: Text(
                  counter.count.toString(),
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildBody() {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildHeroSection(),
          _buildCategories(),
          _buildPopularSellers(),
          _buildAllSellers(),
        ],
      ),
    );
  }

  Widget _buildHeroSection() {
    return Container(
      width: double.infinity,
      height: MediaQuery.of(context).size.height * 0.4,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Colors.blue.shade700, Colors.purple.shade700],
        ),
      ),
      child: Center(
        child: Container(
          constraints: const BoxConstraints(maxWidth: 800),
          padding: const EdgeInsets.symmetric(horizontal: 20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Text(
                "What would you like to order?",
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: MediaQuery.of(context).size.width < 600 ? 24 : 32,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                  letterSpacing: -0.5,
                ),
              ),
              const SizedBox(height: 20),
              _buildSearchBar(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSearchBar() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: TextField(
        controller: _searchController,
        onChanged: (value) {
          // Implement search functionality
          setState(() {
            // Filter sellers based on search
          });
        },
        decoration: InputDecoration(
          hintText: "Search restaurants...",
          prefixIcon: const Icon(Icons.search),
          filled: true,
          fillColor: Colors.white,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(30),
            borderSide: BorderSide.none,
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(30),
            borderSide: BorderSide.none,
          ),
        ),
      ),
    );
  }

  Widget _buildCategories() {
    final categories = [
      {'icon': Icons.restaurant, 'name': 'Restaurants'},
      {'icon': Icons.local_pizza, 'name': 'Fast Food'},
      {'icon': Icons.local_cafe, 'name': 'Cafe'},
      {'icon': Icons.bakery_dining, 'name': 'Bakery'},
    ];

    return Padding(
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Categories",
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 20),
          GridView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: MediaQuery.of(context).size.width > 800 ? 4 : 2,
              childAspectRatio: 1.5,
              crossAxisSpacing: 15,
              mainAxisSpacing: 15,
            ),
            itemCount: categories.length,
            itemBuilder: (context, index) {
              return _buildCategoryCard(
                categories[index]['icon'] as IconData,
                categories[index]['name'] as String,
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildCategoryCard(IconData icon, String name) {
    return InkWell( // Changed from MouseRegion to InkWell
      onTap: () {
        // Implement category filter
      },
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 10,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 32, color: Colors.blue),
            const SizedBox(height: 8),
            Text(
              name,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPopularSellers() {
    return StreamBuilder<List<Sellers>>(
      stream: sellersStream,
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return const Center(child: CircularProgressIndicator());
        }

        if (_isLoading) {
          return const Center(child: CircularProgressIndicator());
        }

        if (_hasError) {
          return const Center(
            child: Text('Something went wrong. Please try again.'),
          );
        }

        return Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                "Popular Restaurants",
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              SizedBox(
                height: 200,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: snapshot.data!.length,
                  itemBuilder: (context, index) {
                    return InkWell(
                      onTap: () => _navigateToMenuScreen(snapshot.data![index]),
                      child: _buildPopularSellerCard(snapshot.data![index]),
                    );
                  },
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildPopularSellerCard(Sellers seller) {
    return Container(
      width: 300,
      margin: const EdgeInsets.only(right: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ClipRRect(
            borderRadius: const BorderRadius.vertical(top: Radius.circular(12)),
            child: Image.network(
              seller.sellerAvatarUrl!,
              height: 120,
              width: double.infinity,
              fit: BoxFit.cover,
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(12),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  seller.sellerName!,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  "⭐ 4.5 • 20-30 min",
                  style: TextStyle(
                    color: Colors.grey[600],
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAllSellers() {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance.collection("sellers").snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return const Center(child: CircularProgressIndicator());
        }

        return Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                "All Restaurants",
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              GridView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: _getGridCrossAxisCount(MediaQuery.of(context).size.width),
                  childAspectRatio: 0.8,
                  crossAxisSpacing: 20,
                  mainAxisSpacing: 20,
                ),
                itemCount: snapshot.data!.docs.length,
                itemBuilder: (context, index) {
                  Sellers seller = Sellers.fromJson(
                    snapshot.data!.docs[index].data() as Map<String, dynamic>,
                  );
                  return InkWell(
                    onTap: () => _navigateToMenuScreen(seller),
                    child: _buildSellerCard(seller),
                  );
                },
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildSellerCard(Sellers seller) {
    return InkWell(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (c) => MenusScreen(model: seller),
          ),
        );
      },
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 10,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ClipRRect(
              borderRadius: const BorderRadius.vertical(top: Radius.circular(12)),
              child: Image.network(
                seller.sellerAvatarUrl!,
                height: 150,
                width: double.infinity,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    height: 150,
                    color: Colors.grey[100],
                    child: const Center(
                      child: Icon(Icons.error_outline, color: Colors.grey),
                    ),
                  );
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    seller.sellerName!,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 4),
                  Text(
                    "⭐ 4.5 • 20-30 min",
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 14,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    "Free delivery",
                    style: TextStyle(
                      color: Colors.green[600],
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  int _getGridCrossAxisCount(double width) {
    if (width > 1200) return 4;
    if (width > 800) return 3;
    if (width > 600) return 2;
    return 1;
  }

}

================
File: lib/mainScreens/item_detail_screen.dart
================
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:number_inc_dec/number_inc_dec.dart';
import '/assistantMethods/assistant_methods.dart';
import '/models/items.dart';

class ItemDetailScreen extends StatefulWidget {
  final Items? model;
  ItemDetailScreen({this.model});

  @override
  State<ItemDetailScreen> createState() => _ItemDetailScreenState();
}

class _ItemDetailScreenState extends State<ItemDetailScreen> {
  TextEditingController counterTextEditingController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: _buildAppBar(),
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 1200),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildImageSection(),
                  _buildDetailsSection(),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => Navigator.pop(context),
      ),
      title: const Text(
        "Item Details",
        style: TextStyle(fontSize: 32, fontFamily: "Lexend"),
      ),
      centerTitle: true,
      elevation: 0,
    );
  }

  Widget _buildImageSection() {
    return Container(
      width: double.infinity,
      height: 300,
      decoration: BoxDecoration(
        borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
        image: DecorationImage(
          image: NetworkImage(widget.model!.thumbnailUrl.toString()),
          fit: BoxFit.cover,
        ),
      ),
    );
  }

  Widget _buildDetailsSection() {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Text(
                  widget.model!.title.toString(),
                  style: const TextStyle(
                    fontFamily: "Lexend",
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              Text(
                "€${widget.model!.price}",
                style: const TextStyle(
                  fontFamily: "Lexend",
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          Text(
            widget.model!.longDescription.toString(),
            style: const TextStyle(
              fontFamily: "Lexend",
              fontSize: 16,
              color: Colors.black87,
              height: 1.5,
            ),
          ),
          const SizedBox(height: 30),
          Container(
            padding: const EdgeInsets.all(15),
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.circular(10),
            ),
            child: NumberInputPrefabbed.roundedButtons(
              controller: counterTextEditingController,
              incDecBgColor: Colors.blue,
              min: 1,
              max: 9,
              initialValue: 1,
              buttonArrangement: ButtonArrangement.incRightDecLeft,
              style: const TextStyle(
                fontFamily: "Lexend",
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          const SizedBox(height: 30),
          SizedBox(
            width: double.infinity,
            height: 50,
            child: ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              onPressed: () {
                int itemCounter = int.parse(counterTextEditingController.text);
                List<String> separateItemIDsList = separateItemIDs();

                if (separateItemIDsList.contains(widget.model!.itemID)) {
                  Fluttertoast.showToast(msg: "Item is already in Cart.");
                } else {
                  addItemToCart(widget.model!.itemID, context, itemCounter);
                }
              },
              child: const Text(
                "Add to Cart",
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontFamily: "Lexend",
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

================
File: lib/mainScreens/items_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';
import '/models/items.dart';
import '/models/menus.dart';
import '/widgets/items_design.dart';
import '/widgets/progress_bar.dart';

class ItemsScreen extends StatefulWidget {
  final Menus? model;
  const ItemsScreen({super.key, this.model});

  @override
  State<ItemsScreen> createState() => _ItemsScreenState();
}

class _ItemsScreenState extends State<ItemsScreen> {
  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: _buildAppBar(),
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 1200),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: Column(
              children: [
                _buildHeader(),
                Expanded(
                  child: _buildItemsList(),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => Navigator.pop(context),
      ),
      title: const Text(
        "Pamvotis",
        style: TextStyle(fontSize: 32, fontFamily: "Lexend"),
      ),
      centerTitle: true,
      elevation: 0,
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
      ),
      child: Row(
        children: [
          const Icon(Icons.restaurant_menu, color: Colors.blue, size: 30),
          const SizedBox(width: 10),
          Expanded(
            child: Text(
              widget.model!.menuTitle.toString(),
              style: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                fontFamily: "Lexend",
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildItemsList() {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection("sellers")
          .doc(widget.model!.sellerUID)
          .collection("menus")
          .doc(widget.model!.menuID)
          .collection("items")
          .orderBy("publishedDate", descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(child: circularProgress());
        }

        if (snapshot.data!.docs.isEmpty) {
          return _buildEmptyState();
        }

        return Padding(
          padding: const EdgeInsets.all(15),
          child: LayoutBuilder(
            builder: (context, constraints) {
              return GridView.builder(
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: _getCrossAxisCount(constraints.maxWidth),
                  childAspectRatio: 0.8,
                  crossAxisSpacing: 15,
                  mainAxisSpacing: 15,
                ),
                itemCount: snapshot.data!.docs.length,
                itemBuilder: (context, index) {
                  Items model = Items.fromJson(
                    snapshot.data!.docs[index].data()! as Map<String, dynamic>,
                  );
                  return ItemsDesignWidget(
                    model: model,
                    context: context,
                  );
                },
              );
            },
          ),
        );
      },
    );
  }

  int _getCrossAxisCount(double width) {
    if (width < 600) return 1;
    if (width < 900) return 2;
    if (width < 1200) return 3;
    return 4;
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.restaurant_menu,
            size: 100,
            color: Colors.grey.shade400,
          ),
          const SizedBox(height: 20),
          Text(
            "No items available",
            style: TextStyle(
              color: Colors.grey.shade600,
              fontSize: 24,
              fontFamily: "Lexend",
            ),
          ),
          const SizedBox(height: 10),
          Text(
            "Items will appear here once added",
            style: TextStyle(
              color: Colors.grey.shade500,
              fontSize: 16,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }
}

================
File: lib/mainScreens/menus_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:pamvotis_users_web/mainScreens/home_screen.dart';
import '/assistantMethods/assistant_methods.dart';
import '/models/menus.dart';
import '/models/sellers.dart';
import '/splashScreen/splash_screen.dart';
import '/widgets/menus_design.dart';
import '/widgets/progress_bar.dart';

class MenusScreen extends StatefulWidget {
  final Sellers? model;
  MenusScreen({this.model});

  @override
  State<MenusScreen> createState() => _MenusScreenState();
}

class _MenusScreenState extends State<MenusScreen> {
  Future<bool> _onWillPop() async {
    Navigator.pop(context);
    return false;
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: _buildAppBar(),
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 1200),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: Column(
              children: [
                _buildHeader(),
                Expanded(
                  child: _buildMenusList(),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => Navigator.pop(context),
      ),
      title: const Text(
        "Pamvotis",
        style: TextStyle(
          fontSize: 32,
          fontFamily: "Lexend",
          color: Colors.white,
        ),
      ),
      centerTitle: true,
      elevation: 0,
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
      ),
      child: Row(
        children: [
          const Icon(Icons.restaurant_menu, color: Colors.blue, size: 30),
          const SizedBox(width: 10),
          Expanded(
            child: Text(
              "${widget.model!.sellerName} Menus",
              style: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                fontFamily: "Lexend",
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMenusList() {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection("sellers")
          .doc(widget.model!.sellerUID)
          .collection("menus")
          .orderBy("publishedDate", descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(child: circularProgress());
        }

        if (snapshot.data!.docs.isEmpty) {
          return _buildEmptyState();
        }

        return Padding(
          padding: const EdgeInsets.all(15),
          child: LayoutBuilder(
            builder: (context, constraints) {
              return GridView.builder(
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: _getCrossAxisCount(constraints.maxWidth),
                  childAspectRatio: 0.8,
                  crossAxisSpacing: 15,
                  mainAxisSpacing: 15,
                ),
                itemCount: snapshot.data!.docs.length,
                itemBuilder: (context, index) {
                  Menus model = Menus.fromJson(
                      snapshot.data!.docs[index].data()! as Map<String, dynamic>
                  );
                  return MenusDesignWidget(
                    model: model,
                    context: context,
                  );
                },
              );
            },
          ),
        );
      },
    );
  }

  int _getCrossAxisCount(double width) {
    if (width < 600) return 1;
    if (width < 900) return 2;
    if (width < 1200) return 3;
    return 4;
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.restaurant_menu,
            size: 100,
            color: Colors.grey.shade400,
          ),
          const SizedBox(height: 20),
          Text(
            "No menus available",
            style: TextStyle(
              color: Colors.grey.shade600,
              fontSize: 24,
              fontFamily: "Lexend",
            ),
          ),
          const SizedBox(height: 10),
          Text(
            "Menus will appear here once added",
            style: TextStyle(
              color: Colors.grey.shade500,
              fontSize: 16,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }
}

================
File: lib/mainScreens/my_orders_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '/assistantMethods/assistant_methods.dart';
import '/global/global.dart';
import '/widgets/order_card.dart';
import '/widgets/progress_bar.dart';

class MyOrdersScreen extends StatefulWidget {
  @override
  State<MyOrdersScreen> createState() => _MyOrdersScreenState();
}

class _MyOrdersScreenState extends State<MyOrdersScreen> {
  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: _buildAppBar(),
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 1200),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: Column(
              children: [
                _buildHeader(),
                Expanded(
                  child: _buildOrdersList(),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => Navigator.pop(context),
      ),
      title: const Text(
        "My Orders",
        style: TextStyle(
          fontSize: 32,
          fontFamily: "Lexend",
          color: Colors.white,
        ),
      ),
      centerTitle: true,
      elevation: 0,
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
      ),
      child: const Row(
        children: [
          Icon(Icons.shopping_bag, color: Colors.blue, size: 30),
          SizedBox(width: 10),
          Text(
            "Current Orders",
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrdersList() {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection("users")
          .doc(sharedPreferences!.getString("uid"))
          .collection("orders")
          .where("status", isEqualTo: "normal")
          .orderBy("orderTime", descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(child: circularProgress());
        }

        if (snapshot.data!.docs.isEmpty) {
          return _buildEmptyState();
        }

        return ListView.builder(
          padding: const EdgeInsets.all(15),
          itemCount: snapshot.data!.docs.length,
          itemBuilder: (context, index) {
            return Padding(
              padding: const EdgeInsets.only(bottom: 10),
              child: FutureBuilder<QuerySnapshot>(
                future: FirebaseFirestore.instance
                    .collection("items")
                    .where(
                  "itemID",
                  whereIn: separateOrderItemIDs(
                    (snapshot.data!.docs[index].data()!
                    as Map<String, dynamic>)["productIDs"],
                  ),
                )
                    .where(
                  "orderBy",
                  whereIn: (snapshot.data!.docs[index].data()!
                  as Map<String, dynamic>)["uid"],
                )
                    .orderBy("publishedDate", descending: true)
                    .get(),
                builder: (context, snap) {
                  if (!snap.hasData) {
                    return Center(child: circularProgress());
                  }

                  return OrderCard(
                    itemCount: snap.data!.docs.length,
                    data: snap.data!.docs,
                    orderID: snapshot.data!.docs[index].id,
                    separateQuantitiesList: separateOrderItemQuantities(
                      (snapshot.data!.docs[index].data()!
                      as Map<String, dynamic>)["productIDs"],
                    ),
                  );
                },
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.shopping_bag_outlined,
            size: 100,
            color: Colors.grey.shade400,
          ),
          const SizedBox(height: 20),
          Text(
            "No orders yet",
            style: TextStyle(
              color: Colors.grey.shade600,
              fontSize: 24,
              fontFamily: "Lexend",
            ),
          ),
          const SizedBox(height: 10),
          Text(
            "Your orders will appear here",
            style: TextStyle(
              color: Colors.grey.shade500,
              fontSize: 16,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }
}

================
File: lib/mainScreens/order_details_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '/global/global.dart';
import '/widgets/progress_bar.dart';
import '/widgets/shipment_address_design.dart';
import '/widgets/status_banner.dart';
import '../models/address.dart';

class OrderDetailsScreen extends StatefulWidget {
  final String? orderID;
  OrderDetailsScreen({this.orderID});

  @override
  State<OrderDetailsScreen> createState() => _OrderDetailsScreenState();
}

class _OrderDetailsScreenState extends State<OrderDetailsScreen> {
  String orderStatus = "";

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: _buildAppBar(),
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 1200),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(15),
              child: SingleChildScrollView(
                child: _buildOrderDetails(),
              ),
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => Navigator.pop(context),
      ),
      title: const Text(
        "Order Details",
        style: TextStyle(
          fontSize: 32,
          fontFamily: "Lexend",
          color: Colors.white,
        ),
      ),
      centerTitle: true,
      elevation: 0,
    );
  }

  Widget _buildOrderDetails() {
    return FutureBuilder<DocumentSnapshot>(
      future: FirebaseFirestore.instance
          .collection("users")
          .doc(sharedPreferences!.getString("uid"))
          .collection("orders")
          .doc(widget.orderID)
          .get(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(child: circularProgress());
        }

        Map<String, dynamic> dataMap =
        snapshot.data!.data()! as Map<String, dynamic>;
        orderStatus = dataMap["status"].toString();

        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            StatusBanner(
              status: dataMap["isSuccess"],
              orderStatus: orderStatus,
            ),
            _buildOrderSummary(dataMap),
            _buildOrderStatus(orderStatus),
            _buildShippingAddress(dataMap),
          ],
        );
      },
    );
  }

  Widget _buildOrderSummary(Map<String, dynamic> dataMap) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        border: Border(
          bottom: BorderSide(color: Colors.grey.shade200),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                "€${dataMap["totalAmount"]}",
                style: const TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  fontFamily: "Lexend",
                  color: Colors.blue,
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 6,
                ),
                decoration: BoxDecoration(
                  color: Colors.blue.shade100,
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Text(
                  "Order #${widget.orderID!.substring(0, 8)}",
                  style: TextStyle(
                    color: Colors.blue.shade700,
                    fontSize: 14,
                    fontFamily: "Lexend",
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 10),
          Text(
            DateFormat("dd MMMM, yyyy - hh:mm aa").format(
              DateTime.fromMillisecondsSinceEpoch(
                int.parse(dataMap["orderTime"]),
              ),
            ),
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey.shade600,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrderStatus(String status) {
    return Container(
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Image.asset(
            status == "ended"
                ? "images/delivered.jpg"
                : "images/state.jpg",
            height: 200,
            fit: BoxFit.contain,
          ),
          const SizedBox(height: 20),
          Text(
            status == "ended" ? "Delivered" : "In Progress",
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
              color: status == "ended"
                  ? Colors.green
                  : Colors.orange,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildShippingAddress(Map<String, dynamic> dataMap) {
    return FutureBuilder<DocumentSnapshot>(
      future: FirebaseFirestore.instance
          .collection("users")
          .doc(sharedPreferences!.getString("uid"))
          .collection("userAddress")
          .doc(dataMap["addressId"])
          .get(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(child: circularProgress());
        }

        return ShipmentAddressDesign(
          model: Address.fromJson(
            snapshot.data!.data()! as Map<String, dynamic>,
          ),
        );
      },
    );
  }
}

================
File: lib/mainScreens/placed_order_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import '/assistantMethods/assistant_methods.dart';
import '/global/global.dart';
import '/mainScreens/home_screen.dart';

class PlacedOrderScreen extends StatefulWidget {
  final String? addressId;
  final double? totalAmount;
  final String? sellerUID;

  const PlacedOrderScreen({
    Key? key,
    this.addressId,
    this.totalAmount,
    this.sellerUID,
  }) : super(key: key);

  @override
  State<PlacedOrderScreen> createState() => _PlacedOrderScreenState();
}

class _PlacedOrderScreenState extends State<PlacedOrderScreen> {
  String orderId = DateTime.now().millisecondsSinceEpoch.toString();
  bool isProcessing = false;

  Future<void> addOrderDetails() async {
    setState(() {
      isProcessing = true;
    });

    try {
      final orderData = {
        "addressId": widget.addressId,
        "totalAmount": widget.totalAmount,
        "orderBy": sharedPreferences!.getString("uid"),
        "productIDs": sharedPreferences!.getStringList("userCart"),
        "paymentDetails": "Cash on Delivery",
        "orderTime": orderId,
        "isSuccess": true,
        "sellerUID": widget.sellerUID,
        "riderUID": "",
        "status": "normal",
        "orderId": orderId,
      };

      await writeOrderDetailsForUser(orderData);
      await writeOrderDetailsForSeller(orderData);
      await clearCartNow(context);

      if (!mounted) return;

      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const HomeScreen()),
      );

      Fluttertoast.showToast(msg: "Order placed successfully!");
    } catch (error) {
      setState(() {
        isProcessing = false;
      });

      Fluttertoast.showToast(msg: "Error placing order: ${error.toString()}");
    }
  }

  Future<void> writeOrderDetailsForUser(Map<String, dynamic> data) async {
    await FirebaseFirestore.instance
        .collection("users")
        .doc(sharedPreferences!.getString("uid"))
        .collection("orders")
        .doc(orderId)
        .set(data);
  }

  Future<void> writeOrderDetailsForSeller(Map<String, dynamic> data) async {
    await FirebaseFirestore.instance
        .collection("orders")
        .doc(orderId)
        .set(data);
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 600),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                _buildHeader(),
                _buildOrderSummary(),
                _buildPlaceOrderButton(),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
      ),
      child: Column(
        children: [
          Image.asset(
            "images/logo.jpg",
            height: 100,
            fit: BoxFit.contain,
          ),
          const SizedBox(height: 20),
          const Text(
            "Order Confirmation",
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrderSummary() {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Column(
        children: [
          _buildSummaryItem("Order Total", "€${widget.totalAmount?.toStringAsFixed(2)}"),
          const SizedBox(height: 10),
          _buildSummaryItem("Payment Method", "Cash on Delivery"),
        ],
      ),
    );
  }

  Widget _buildSummaryItem(String label, String value) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: TextStyle(
            fontSize: 16,
            color: Colors.grey.shade600,
            fontFamily: "Lexend",
          ),
        ),
        Text(
          value,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            fontFamily: "Lexend",
          ),
        ),
      ],
    );
  }

  Widget _buildPlaceOrderButton() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        border: Border(
          top: BorderSide(color: Colors.grey.shade200),
        ),
      ),
      child: SizedBox(
        width: double.infinity,
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blue,
            padding: const EdgeInsets.symmetric(vertical: 15),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          onPressed: isProcessing ? null : addOrderDetails,
          child: isProcessing
              ? const SizedBox(
            height: 20,
            width: 20,
            child: CircularProgressIndicator(
              color: Colors.white,
              strokeWidth: 2,
            ),
          )
              : const Text(
            "Place Order",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
            ),
          ),
        ),
      ),
    );
  }
}

================
File: lib/mainScreens/save_address_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:geocoding/geocoding.dart';
import 'package:geolocator/geolocator.dart';
import '/global/global.dart';
import '/models/address.dart';

class SaveAddressScreen extends StatefulWidget {
  const SaveAddressScreen({super.key});

  @override
  State<SaveAddressScreen> createState() => _SaveAddressScreenState();
}

class _SaveAddressScreenState extends State<SaveAddressScreen> {
  final _name = TextEditingController();
  final _phoneNumber = TextEditingController();
  final _flatNumber = TextEditingController();
  final _city = TextEditingController();
  final _state = TextEditingController();
  final _completeAddress = TextEditingController();
  final _locationController = TextEditingController();
  final formKey = GlobalKey<FormState>();
  List<Placemark>? placemarks;
  Position? position;

  Future<void> getUserLocationAddress() async {
    try {
      // Request location permission
      LocationPermission permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        throw Exception('Location permission denied');
      }

      // Check if location service is enabled
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        throw Exception('Location services are disabled');
      }

      // Configure location settings
      const LocationSettings locationSettings = LocationSettings(
        accuracy: LocationAccuracy.high,
        distanceFilter: 100,
      );

      // Get current position
      Position newPosition = await Geolocator.getCurrentPosition(
        locationSettings: locationSettings,
      );

      position = newPosition;

      // Get address from coordinates
      placemarks = await placemarkFromCoordinates(
        position!.latitude,
        position!.longitude,
      );

      Placemark pMark = placemarks![0];

      String fullAddress = '${pMark.subThoroughfare} ${pMark.thoroughfare}, '
          '${pMark.subLocality} ${pMark.locality}, '
          '${pMark.subAdministrativeArea}, ${pMark.administrativeArea} '
          '${pMark.postalCode}, ${pMark.country}';

      _locationController.text = fullAddress;
      _flatNumber.text =
      '${pMark.subThoroughfare} ${pMark.thoroughfare}, ${pMark.subLocality} ${pMark.locality}';
      _city.text =
      '${pMark.subAdministrativeArea}, ${pMark.administrativeArea} ${pMark.postalCode}';
      _state.text = '${pMark.country}';
      _completeAddress.text = fullAddress;
    } catch (e) {
      Fluttertoast.showToast(msg: "Error getting location: ${e.toString()}");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: _buildAppBar(),
        floatingActionButton: _buildSaveButton(),
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 800),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(20),
              child: Form(
                key: formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildHeader(),
                    const SizedBox(height: 20),
                    _buildLocationSection(),
                    const SizedBox(height: 30),
                    _buildAddressForm(),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      title: const Text(
        "Add New Address",
        style: TextStyle(fontSize: 32, fontFamily: "Lexend"),
      ),
      centerTitle: true,
      elevation: 0,
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: BorderRadius.circular(10),
      ),
      child: Row(
        children: [
          Icon(Icons.location_on, color: Colors.blue.shade700),
          const SizedBox(width: 10),
          const Text(
            "Delivery Address",
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLocationSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildTextField(
          controller: _locationController,
          hint: "Your current location",
          prefixIcon: Icons.location_on,
          readOnly: true,
        ),
        const SizedBox(height: 15),
        SizedBox(
          width: double.infinity,
          child: ElevatedButton.icon(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              padding: const EdgeInsets.symmetric(vertical: 15),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            onPressed: getUserLocationAddress,
            icon: const Icon(Icons.my_location),
            label: const Text(
              "Get Current Location",
              style: TextStyle(
                fontFamily: "Lexend",
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildAddressForm() {
    return Column(
      children: [
        _buildTextField(
          controller: _name,
          hint: "Full Name",
          prefixIcon: Icons.person,
        ),
        const SizedBox(height: 15),
        _buildTextField(
          controller: _phoneNumber,
          hint: "Phone Number",
          prefixIcon: Icons.phone,
          keyboardType: TextInputType.phone,
        ),
        const SizedBox(height: 15),
        _buildTextField(
          controller: _city,
          hint: "City",
          prefixIcon: Icons.location_city,
        ),
        const SizedBox(height: 15),
        _buildTextField(
          controller: _state,
          hint: "State / Country",
          prefixIcon: Icons.map,
        ),
        const SizedBox(height: 15),
        _buildTextField(
          controller: _flatNumber,
          hint: "Address Line",
          prefixIcon: Icons.home,
        ),
        const SizedBox(height: 15),
        _buildTextField(
          controller: _completeAddress,
          hint: "Complete Address",
          prefixIcon: Icons.location_on,
          maxLines: 3,
        ),
      ],
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hint,
    required IconData prefixIcon,
    bool readOnly = false,
    TextInputType? keyboardType,
    int maxLines = 1,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextFormField(
        controller: controller,
        readOnly: readOnly,
        keyboardType: keyboardType,
        maxLines: maxLines,
        style: const TextStyle(
          fontFamily: "Lexend",
          fontSize: 16,
        ),
        decoration: InputDecoration(
          hintText: hint,
          prefixIcon: Icon(prefixIcon, color: Colors.blue),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide.none,
          ),
          filled: true,
          fillColor: Colors.grey.shade50,
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 12,
          ),
        ),
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Please enter $hint';
          }
          return null;
        },
      ),
    );
  }

  Widget _buildSaveButton() {
    return FloatingActionButton.extended(
      backgroundColor: Colors.blue,
      onPressed: () async {
        if (formKey.currentState!.validate()) {
          try {
            if (position == null) {
              throw Exception("Please get your location first");
            }

            final model = Address(
              name: _name.text.trim(),
              state: _state.text.trim(),
              fullAddress: _completeAddress.text.trim(),
              phoneNumber: _phoneNumber.text.trim(),
              flatNumber: _flatNumber.text.trim(),
              city: _city.text.trim(),
              lat: position!.latitude,
              lng: position!.longitude,
            ).toJson();

            await FirebaseFirestore.instance
                .collection("users")
                .doc(sharedPreferences!.getString("uid"))
                .collection("userAddress")
                .doc(DateTime.now().millisecondsSinceEpoch.toString())
                .set(model);

            Fluttertoast.showToast(msg: "Address saved successfully!");
            formKey.currentState!.reset();
          } catch (e) {
            Fluttertoast.showToast(msg: e.toString());
          }
        }
      },
      icon: const Icon(Icons.save),
      label: const Text(
        "Save Address",
        style: TextStyle(
          fontFamily: "Lexend",
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}

================
File: lib/mainScreens/search_screen.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '/models/sellers.dart';
import '/widgets/sellers_design.dart';

class SearchScreen extends StatefulWidget {
  const SearchScreen({super.key});

  @override
  State<SearchScreen> createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  Future<QuerySnapshot>? restaurantsDocumentsList;
  String sellerNameText = "";
  final TextEditingController _searchController = TextEditingController();

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  void initSearchingRestaurant(String textEntered) {
    setState(() {
      restaurantsDocumentsList = FirebaseFirestore.instance
          .collection("sellers")
          .where("sellerName", isGreaterThanOrEqualTo: textEntered)
          .get();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topRight,
          end: Alignment.bottomLeft,
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: _buildAppBar(),
        body: Center(
          child: Container(
            margin: const EdgeInsets.all(20),
            constraints: const BoxConstraints(maxWidth: 1200),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: Column(
              children: [
                _buildSearchHeader(),
                Expanded(child: _buildSearchResults()),
              ],
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      flexibleSpace: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.blue.shade400,
              Colors.blue.shade600,
            ],
            begin: const FractionalOffset(0.0, 0.0),
            end: const FractionalOffset(1.0, 0.0),
          ),
        ),
      ),
      title: const Text(
        "Search",
        style: TextStyle(
          fontSize: 32,
          fontFamily: "Lexend",
        ),
      ),
      centerTitle: true,
      elevation: 0,
    );
  }

  Widget _buildSearchHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
      ),
      child: TextField(
        controller: _searchController,
        onChanged: (textEntered) {
          setState(() {
            sellerNameText = textEntered;
          });
          initSearchingRestaurant(textEntered);
        },
        style: const TextStyle(
          fontSize: 16,
          fontFamily: "Lexend",
        ),
        decoration: InputDecoration(
          hintText: "Search for Restaurant/Cafe",
          hintStyle: TextStyle(
            color: Colors.grey.shade600,
            fontFamily: "Lexend",
          ),
          prefixIcon: const Icon(Icons.search, color: Colors.blue),
          suffixIcon: _searchController.text.isNotEmpty
              ? IconButton(
            icon: const Icon(Icons.clear, color: Colors.blue),
            onPressed: () {
              _searchController.clear();
              setState(() {
                sellerNameText = "";
                restaurantsDocumentsList = null;
              });
            },
          )
              : null,
          filled: true,
          fillColor: Colors.white,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide.none,
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(color: Colors.grey.shade200),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(color: Colors.blue.shade400),
          ),
        ),
      ),
    );
  }

  Widget _buildSearchResults() {
    return FutureBuilder<QuerySnapshot>(
      future: restaurantsDocumentsList,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        }

        if (snapshot.hasError) {
          return Center(
            child: Text(
              "Error: ${snapshot.error}",
              style: const TextStyle(
                color: Colors.red,
                fontFamily: "Lexend",
              ),
            ),
          );
        }

        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          return _buildEmptyState();
        }

        return ListView.builder(
          padding: const EdgeInsets.all(15),
          itemCount: snapshot.data!.docs.length,
          itemBuilder: (context, index) {
            Sellers model = Sellers.fromJson(
              snapshot.data!.docs[index].data()! as Map<String, dynamic>,
            );
            return Padding(
              padding: const EdgeInsets.only(bottom: 10),
              child: SellersDesignWidget(
                model: model,
                context: context,
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.search_off_rounded,
            size: 100,
            color: Colors.grey.shade400,
          ),
          const SizedBox(height: 20),
          Text(
            sellerNameText.isEmpty
                ? "Start searching for restaurants"
                : "No restaurants found",
            style: TextStyle(
              color: Colors.grey.shade600,
              fontSize: 20,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }
}

================
File: lib/maps/maps.dart
================
import 'package:url_launcher/url_launcher.dart';
import 'package:url_launcher/url_launcher_string.dart';

class MapsUtils{

  MapsUtils._();

  static Future<void> openMapWithPosition(double latitude, double longitude) async {
    // String? googleMapUrl = "https://www.google.com/maps/search/?api=1&query=$latitude,$longitude";
    //
    // if(await launch(googleMapUrl)){
    //     await launch(googleMapUrl);
    // }
    // else {
    //   throw "Could not open the map.";
    // }
    String mapOptions = '$latitude,$longitude';

    final googleMapUrl = ('https://www.google.com/maps/search/?api=1&query=$mapOptions');
    Uri googleMapUrlUri = Uri.parse(googleMapUrl);

    if(!await launchUrl(googleMapUrlUri)){
      throw Exception('Could not launch $googleMapUrl');
    }
  }

  static Future<void> openMapWithAddress(String fullAddress) async{
      String query = Uri.encodeComponent(fullAddress);
      String googleMapUrl = "https://www.google.com/maps/search/?api=1&query=$query";

      if(await canLaunchUrlString(googleMapUrl)){
        await canLaunchUrlString(googleMapUrl);
      }
      else {
        throw "Could not open the map";
      }
  }
}

================
File: lib/models/address.dart
================
class Address{
  String? name;
  String? phoneNumber;
  String? flatNumber;
  String? city;
  String? state;
  String? fullAddress;
  double? lat;
  double? lng;

  static String? selectedAddress;


  Address({
    this.name,
    this.phoneNumber,
    this.flatNumber,
    this.city,
    this.state,
    this.fullAddress,
    this.lat,
    this.lng,
  });

  Address.fromJson(Map<String, dynamic> json){
    name = json['name'];
    phoneNumber = json['phoneNumber'];
    flatNumber = json['flatNumber'];
    city = json['city'];
    state = json['state'];
    fullAddress = json['fullAddress'];
    lat = json['lat'];
    lng = json['lng'];
  }

  Map<String, dynamic> toJson(){
    final Map<String, dynamic> data = <String, dynamic>{};
    data['name'] = name;
    data['phoneNumber'] = phoneNumber;
    data['flatNumber'] = flatNumber;
    data['city'] = city;
    data['state'] = state;
    data['fullAddress'] = fullAddress;
    data['lat'] = lat;
    data['lng'] = lng;

    return data;
  }
}

================
File: lib/models/items.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';

class Items{
  String? menuID;
  String? sellerUID;
  String? itemID;
  String? title;
  String? shortInfo;
  Timestamp? publishedDate;
  String? thumbnailUrl;
  String? longDescription;
  String? status;
  double? price;

  Items({
    this.menuID,
    this.sellerUID,
    this.itemID,
    this.title,
    this.shortInfo,
    this.publishedDate,
    this.thumbnailUrl,
    this.longDescription,
    this.status,
  });

  Items.fromJson(Map<String, dynamic> json){
    menuID = json['menuID'];
    sellerUID = json['sellerUID'];
    itemID = json['itemID'];
    title = json['title'];
    shortInfo = json['shortInfo'];
    publishedDate = json['publishedDate'];
    thumbnailUrl = json['thumbnailUrl'];
    longDescription = json['longDescription'];
    status = json['status'];
    price = json['price'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data['menuID'] = menuID;
    data['sellerUID'] = sellerUID;
    data['itemID'] = itemID;
    data['title'] = title;
    data['shortInfo'] = shortInfo;
    data['publishedDate'] = publishedDate;
    data['thumbnailUrl'] = thumbnailUrl;
    data['longDescription'] = longDescription;
    data['status'] = status;

    return data;
  }
}

================
File: lib/models/loyalty.dart
================
class LoyaltyProgram {
  final String userId;
  int points;
  LoyaltyTier tier;
  List<LoyaltyReward> availableRewards;

  LoyaltyProgram({
    required this.userId,
    this.points = 0,
    this.tier = LoyaltyTier.bronze,
    required this.availableRewards,
  });
}

enum LoyaltyTier { bronze, silver, gold, platinum }

class LoyaltyReward {
  final String id;
  final String title;
  final int pointsCost;
  final RewardType type;
  final double value;

  LoyaltyReward({
    required this.id,
    required this.title,
    required this.pointsCost,
    required this.type,
    required this.value,
  });
}

enum RewardType { discount, freeDelivery, freeItem }

================
File: lib/models/menus.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';

class Menus {
  String? menuID;
  String? sellerUID;
  String? menuTitle;
  String? menuInfo;
  Timestamp? publishedDate;
  String? thumbnailUrl;
  String? status;

  Menus({
    this.menuID,
    this.sellerUID,
    this.menuInfo,
    this.menuTitle,
    this.publishedDate,
    this.thumbnailUrl,
    this.status,
  });

  Menus.fromJson(Map<String, dynamic> json){
    menuID = json["menuID"];
    sellerUID = json["sellerUID"];
    menuTitle = json["menuTitle"];
    menuInfo = json["menuInfo"];
    publishedDate = json["publishedDate"];
    thumbnailUrl = json["thumbnailUrl"];
    status = json["status"];
  }

  Map<String, dynamic> toJson(){
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["menuID"] = menuID;
    data["sellerUID"] = sellerUID;
    data["menuTitle"] = menuTitle;
    data["menuInfo"] = menuInfo;
    data["publishedDate"] = publishedDate;
    data["thumbnailUrl"] = thumbnailUrl;
    data["status"] = status;

    return data;
  }
}

================
File: lib/models/operation.dart
================
import 'dart:convert';

class Operation {
  final String type;
  final int timestampInMs;
  final String dataJson;

  Operation({
    required this.type,
    Map<String, dynamic>? data,
  }) : timestampInMs = DateTime.now().millisecondsSinceEpoch,
        dataJson = data != null ? jsonEncode(data) : '{}';

  Map<String, dynamic> get data => jsonDecode(dataJson);
}

================
File: lib/models/promotion.dart
================
class Promotion {
  final String id;
  final String title;
  final String description;
  final double discountPercentage;
  final double minimumOrderAmount;
  final DateTime validFrom;
  final DateTime validUntil;
  final String? couponCode;
  final bool isActive;
  final List<String> applicableItems;
  final PromotionType type;

  Promotion({
    required this.id,
    required this.title,
    required this.description,
    required this.discountPercentage,
    required this.minimumOrderAmount,
    required this.validFrom,
    required this.validUntil,
    this.couponCode,
    this.isActive = true,
    required this.applicableItems,
    required this.type,
  });
}

enum PromotionType {
  percentageDiscount,
  freeDelivery,
  buyOneGetOne,
  firstOrder,
  bulkDiscount
}

================
File: lib/models/review.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';

class Review {
  final String id;
  final String userId;
  final String itemId;
  final double rating;
  final String comment;
  final DateTime createdAt;

  Review({
    required this.id,
    required this.userId,
    required this.itemId,
    required this.rating,
    required this.comment,
    required this.createdAt,
  });

  factory Review.fromMap(Map<String, dynamic> map) {
    return Review(
      id: map['id'],
      userId: map['userId'],
      itemId: map['itemId'],
      rating: map['rating'].toDouble(),
      comment: map['comment'],
      createdAt: (map['createdAt'] as Timestamp).toDate(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'userId': userId,
      'itemId': itemId,
      'rating': rating,
      'comment': comment,
      'createdAt': Timestamp.fromDate(createdAt),
    };
  }
}

================
File: lib/models/sellers.dart
================
class Sellers {
  String? sellerUID;
  String? sellerName;
  String? sellerAvatarUrl;
  String? sellerEmail;

  Sellers({
    this.sellerUID,
    this.sellerName,
    this.sellerAvatarUrl,
    this.sellerEmail,
  });

  Sellers.fromJson(Map<String, dynamic> json){
    sellerUID = json["sellerUID"];
    sellerName = json["sellerName"];
    sellerAvatarUrl = json["sellerAvatarUrl"];
    sellerEmail = json["sellerEmail"];
  }

  Map<String, dynamic> toJson(){
    final Map<String, dynamic> data = <String, dynamic>{};
    data["sellerUID"] = sellerUID;
    data["sellerName"] = sellerName;
    data["sellerAvatarUrl"] = sellerAvatarUrl;
    data["sellerEmail"] = sellerEmail;
    return data;
  }
}

================
File: lib/models/user_model.dart
================
class UserModel {
      final String uid;
      final String email;
      final String name;
      final String photoUrl;
      final String status;
      late List<String> userCart;

      UserModel({
            required this.uid,
            required this.email,
            required this.name,
            required this.photoUrl,
            required this.status,
      }) {
            userCart = ['garbageValue'];
      }

      factory UserModel.fromFirestore(Map<String, dynamic> json) {
            return UserModel(
                  uid: json['uid'] as String,
                  email: json['email'] as String,
                  name: json['name'] as String,
                  photoUrl: json['photoUrl'] as String,
                  status: json['status'] as String,
            )..userCart = List<String>.from(json['userCart'] ?? ['garbageValue']);
      }

      Map<String, dynamic> toFirestore() => {
            'uid': uid,
            'email': email,
            'name': name,
            'photoUrl': photoUrl,
            'status': status,
            'userCart': userCart,
      };
}

================
File: lib/repositories/auth_repository.dart
================
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/secure_storage.dart';
import '../services/storage/storage_service.dart';
import '../core/network_info.dart';
import '../core/result.dart';
import '../models/user_model.dart';

class AuthRepository {
  final FirebaseAuth _auth;
  final FirebaseFirestore _firestore;
  final StorageService _storageService;
  final NetworkInfo _networkInfo;
  final SecureStorage _secureStorage;

  AuthRepository({
    FirebaseAuth? auth,
    FirebaseFirestore? firestore,
    required StorageService storageService,
    required NetworkInfo networkInfo,
    required SecureStorage secureStorage,
  }) : _auth = auth ?? FirebaseAuth.instance,
        _firestore = firestore ?? FirebaseFirestore.instance,
        _storageService = storageService,
        _networkInfo = networkInfo,
        _secureStorage = secureStorage;

  Future<Result<UserModel>> login(String email, String password) async {
    try {
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      if (userCredential.user == null) {
        return Result.failure('Login failed - no user returned');
      }

      final userData = await _getUserData(userCredential.user!.uid);
      if (userData == null) {
        return Result.failure('User data not found');
      }

      if (userData.status != "approved") {
        await _auth.signOut();
        return Result.failure('Account blocked by admin. Please contact support.');
      }

      // Cache user data
      await _storageService.saveUser(userData);

      // Store auth token if needed
      if (userCredential.user!.refreshToken != null) {
        await _secureStorage.write(
          key: 'auth_token',
          value: userCredential.user!.refreshToken!,
        );
      }

      return Result.success(userData);
    } on FirebaseAuthException catch (e) {
      return Result.failure(_handleAuthError(e));
    } catch (e) {
      return Result.failure('An unexpected error occurred: $e');
    }
  }

  Future<Result<void>> logout() async {
    try {
      await _auth.signOut();
      await _secureStorage.delete(key: 'auth_token');
      // Clear stored user data
      final currentUser = _auth.currentUser;
      if (currentUser != null) {
        await _storageService.deleteUser(currentUser.uid);
      }
      return Result.success(null);
    } catch (e) {
      return Result.failure('Failed to logout: $e');
    }
  }

  Future<UserModel?> _getUserData(String uid) async {
    try {
      // First try to get from cache
      final cachedUser = await _storageService.getUser(uid);
      if (cachedUser != null && !await _networkInfo.isConnected) {
        return cachedUser;
      }

      // Get from Firestore
      final doc = await _firestore.collection("users").doc(uid).get();
      if (!doc.exists || doc.data() == null) {
        return null;
      }

      final user = UserModel.fromFirestore(doc.data()!);
      await _storageService.saveUser(user);
      return user;
    } catch (e) {
      throw Exception('Failed to get user data: $e');
    }
  }

  Future<Result<UserModel>> register({
    required String email,
    required String password,
    required String name,
    required String photoUrl,
  }) async {
    try {
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      if (userCredential.user == null) {
        return Result.failure('Registration failed - no user created');
      }

      final user = UserModel(
        uid: userCredential.user!.uid,
        email: email,
        name: name,
        photoUrl: photoUrl,
        status: 'approved',  // Default status
      );

      // Save to Firestore
      await _firestore
          .collection('users')
          .doc(user.uid)
          .set(user.toFirestore());

      // Cache user data
      await _storageService.saveUser(user);

      return Result.success(user);
    } on FirebaseAuthException catch (e) {
      return Result.failure(_handleAuthError(e));
    } catch (e) {
      return Result.failure('Registration failed: $e');
    }
  }

  Future<Result<void>> resetPassword(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email);
      return Result.success(null);
    } on FirebaseAuthException catch (e) {
      return Result.failure(_handleAuthError(e));
    } catch (e) {
      return Result.failure('Failed to send password reset email: $e');
    }
  }

  String _handleAuthError(FirebaseAuthException e) {
    switch (e.code) {
      case 'user-not-found':
        return 'No user found with this email';
      case 'wrong-password':
        return 'Wrong password provided';
      case 'user-disabled':
        return 'This account has been disabled';
      case 'too-many-requests':
        return 'Too many login attempts. Please try again later';
      case 'email-already-in-use':
        return 'Email is already registered';
      case 'invalid-email':
        return 'Invalid email address';
      case 'operation-not-allowed':
        return 'Email/password accounts are not enabled';
      case 'weak-password':
        return 'Password is too weak';
      default:
        return e.message ?? 'Authentication failed';
    }
  }
}

================
File: lib/repositories/base_repository.dart
================
import '../core/result.dart';

abstract class BaseRepository<T> {
  Future<Result<T>> get(String id);
  Future<Result<List<T>>> getAll();
  Future<Result<void>> create(T item);
  Future<Result<void>> update(T item);
  Future<Result<void>> delete(String id);
}

================
File: lib/repositories/user_repository.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../core/result.dart';
import '../models/operation.dart';
import '../models/user_model.dart';
import '../services/storage/storage_service.dart';
import '../core/network_info.dart';
import '../utils/firebase_error_handler.dart';

class UserRepository {
  final FirebaseFirestore _firestore;
  final FirebaseAuth _auth;
  final StorageService _storageService;
  final NetworkInfo _networkInfo;

  UserRepository({
    FirebaseFirestore? firestore,
    FirebaseAuth? auth,
    required StorageService storageService,
    required NetworkInfo networkInfo,
  })  : _firestore = firestore ?? FirebaseFirestore.instance,
        _auth = auth ?? FirebaseAuth.instance,
        _storageService = storageService,
        _networkInfo = networkInfo;

  Future<Result<UserModel>> getUser(String uid) async {
    try {
      if (!await _networkInfo.isConnected) {
        final cachedUser = await _storageService.getUser(uid);
        if (cachedUser != null) {
          return Result.success(cachedUser);
        }
        return Result.failure('No internet connection and no cached data available');
      }

      final doc = await _firestore.collection('users').doc(uid).get();

      if (!doc.exists || doc.data() == null) {
        return Result.failure('User not found');
      }

      final user = UserModel.fromFirestore(doc.data()!);
      await _storageService.saveUser(user);

      return Result.success(user);
    } on FirebaseException catch (e) {
      return Result.failure(FirebaseErrorHandler.handleError(e));
    } catch (e) {
      return Result.failure('An unexpected error occurred: $e');
    }
  }

  Future<Result<void>> updateUserCart(String uid, List<String> cart) async {
    try {
      await _storageService.updateUserCart(uid, cart);

      if (!await _networkInfo.isConnected) {
        // Store pending changes
        await _storageService.saveOperation(
          Operation(
            type: 'UPDATE_CART',
            data: {'uid': uid, 'cart': cart},
          ),
        );
        return Result.success(null);
      }

      await _firestore.collection('users').doc(uid).update({
        'userCart': cart,
      });

      return Result.success(null);
    } catch (e) {
      return Result.failure('Failed to update cart: $e');
    }
  }

  Future<Result<void>> syncPendingUpdates() async {
    try {
      if (!await _networkInfo.isConnected) {
        return Result.failure('No internet connection');
      }

      final operations = await _storageService.getOperations();

      for (final operation in operations) {
        if (operation.type == 'UPDATE_CART') {
          try {
            await _firestore
                .collection('users')
                .doc(operation.data['uid'])
                .update({
              'userCart': operation.data['cart'],
            });
          } catch (e) {
            print('Failed to sync update for user ${operation.data['uid']}: $e');
          }
        }
      }

      return Result.success(null);
    } catch (e) {
      return Result.failure('Failed to sync updates: $e');
    }
  }

  // Helper method to check if the user exists
  Future<bool> userExists(String uid) async {
    try {
      final doc = await _firestore.collection('users').doc(uid).get();
      return doc.exists;
    } catch (e) {
      return false;
    }
  }

  // Helper method to get current user data
  Future<Result<UserModel>> getCurrentUser() async {
    try {
      final currentUser = _auth.currentUser;
      if (currentUser == null) {
        return Result.failure('No user is currently signed in');
      }
      return getUser(currentUser.uid);
    } catch (e) {
      return Result.failure('Failed to get current user: $e');
    }
  }

  // Method to update user profile
  Future<Result<void>> updateUserProfile({
    required String uid,
    String? name,
    String? photoUrl,
  }) async {
    try {
      final updates = <String, dynamic>{};
      if (name != null) updates['name'] = name;
      if (photoUrl != null) updates['photoUrl'] = photoUrl;

      if (updates.isEmpty) {
        return Result.success(null);
      }

      await _firestore.collection('users').doc(uid).update(updates);

      // Update local storage
      final currentUser = await _storageService.getUser(uid);
      if (currentUser != null) {
        final updatedUser = UserModel(
          uid: currentUser.uid,
          email: currentUser.email,
          name: name ?? currentUser.name,
          photoUrl: photoUrl ?? currentUser.photoUrl,
          status: currentUser.status,
        );
        await _storageService.saveUser(updatedUser);
      }

      return Result.success(null);
    } catch (e) {
      return Result.failure('Failed to update profile: $e');
    }
  }
}

================
File: lib/services/storage/storage_service_factory.dart
================
import 'package:flutter/foundation.dart';
import 'package:pamvotis_users_web/services/storage/storage_service.dart';
import 'package:pamvotis_users_web/services/storage/web_storage_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

class StorageServiceFactory {
  static Future<StorageService> create() async {
    if (kIsWeb) {
      final prefs = await SharedPreferences.getInstance();
      return WebStorageService(prefs);
    } else {
      throw UnimplementedError('Non-web storage not implemented');
    }
  }
}

================
File: lib/services/storage/storage_service.dart
================
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../models/user_model.dart';
import '../../models/operation.dart';

abstract class StorageService {
  Future<void> saveUser(UserModel user);
  Future<UserModel?> getUser(String uid);
  Future<void> updateUserCart(String uid, List<String> cart);
  Future<List<String>> getUserCart(String uid);
  Future<void> deleteUser(String uid);
  Future<void> saveOperation(Operation operation);
  Future<List<Operation>> getOperations();
  Future<void> clearAll();
}

================
File: lib/services/storage/web_storage_service.dart
================
import 'dart:convert';

import 'package:pamvotis_users_web/services/storage/storage_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../models/operation.dart';
import '../../models/user_model.dart';

class WebStorageService implements StorageService {
  final SharedPreferences _prefs;

  WebStorageService(this._prefs);

  @override
  Future<void> saveUser(UserModel user) async {
    final userData = {
      'uid': user.uid,
      'email': user.email,
      'name': user.name,
      'photoUrl': user.photoUrl,
      'status': user.status,
      'userCart': user.userCart,
    };
    await _prefs.setString('user_${user.uid}', jsonEncode(userData));
  }

  @override
  Future<UserModel?> getUser(String uid) async {
    final data = _prefs.getString('user_$uid');
    if (data == null) return null;

    final Map<String, dynamic> userData = jsonDecode(data);
    return UserModel(
      uid: userData['uid'],
      email: userData['email'],
      name: userData['name'],
      photoUrl: userData['photoUrl'],
      status: userData['status'],
    )..userCart = List<String>.from(userData['userCart']);
  }

  @override
  Future<void> updateUserCart(String uid, List<String> cart) async {
    final data = _prefs.getString('user_$uid');
    if (data != null) {
      final Map<String, dynamic> userData = jsonDecode(data);
      userData['userCart'] = cart;
      await _prefs.setString('user_$uid', jsonEncode(userData));
    }
  }

  @override
  Future<List<String>> getUserCart(String uid) async {
    final data = _prefs.getString('user_$uid');
    if (data != null) {
      final Map<String, dynamic> userData = jsonDecode(data);
      return List<String>.from(userData['userCart']);
    }
    return ['garbageValue'];
  }

  @override
  Future<void> deleteUser(String uid) async {
    await _prefs.remove('user_$uid');
  }

  @override
  Future<void> saveOperation(Operation operation) async {
    final operations = await getOperations();
    operations.add(operation);

    final List<Map<String, dynamic>> operationsData = operations
        .map((op) => {
      'type': op.type,
      'timestampInMs': op.timestampInMs,
      'dataJson': op.dataJson,
    })
        .toList();

    await _prefs.setString('operations', jsonEncode(operationsData));
  }

  @override
  Future<List<Operation>> getOperations() async {
    final data = _prefs.getString('operations');
    if (data == null) return [];

    final List<dynamic> operationsData = jsonDecode(data);
    return operationsData
        .map((op) => Operation(
      type: op['type'],
      data: jsonDecode(op['dataJson']),
    ))
        .toList();
  }

  @override
  Future<void> clearAll() async {
    await _prefs.clear();
  }
}

================
File: lib/services/delivery_scheduler.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';

class DeliveryScheduler {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<List<DateTime>> getAvailableTimeSlots(String restaurantId, DateTime date) async {
    List<DateTime> availableSlots = [];

    // Get restaurant operating hours
    DocumentSnapshot restaurant = await _firestore
        .collection('restaurants')
        .doc(restaurantId)
        .get();

    Map<String, dynamic> operatingHours = restaurant.get('operatingHours');

    // Generate time slots
    DateTime startTime = DateTime(date.year, date.month, date.day,
        operatingHours['openTime']);
    DateTime endTime = DateTime(date.year, date.month, date.day,
        operatingHours['closeTime']);

    // Add slots every 30 minutes
    DateTime currentSlot = startTime;
    while (currentSlot.isBefore(endTime)) {
      availableSlots.add(currentSlot);
      currentSlot = currentSlot.add(const Duration(minutes: 30));
    }

    return availableSlots;
  }

  Future<bool> scheduleDelivery(String orderId, DateTime selectedTime) async {
    try {
      await _firestore.collection('orders').doc(orderId).update({
        'scheduledDeliveryTime': selectedTime,
        'isScheduledDelivery': true,
      });
      return true;
    } catch (e) {
      return false;
    }
  }
}

================
File: lib/services/dynamic_pricing_service.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';

class DynamicPricingService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<double> calculateDynamicPrice(String itemId, String restaurantId) async {
    DocumentSnapshot item = await _firestore
        .collection('items')
        .doc(itemId)
        .get();

    double basePrice = item.get('basePrice');
    double finalPrice = basePrice;

    // Factor 1: Time of day
    int currentHour = DateTime.now().hour;
    if (currentHour >= 11 && currentHour <= 14) { // Lunch rush
      finalPrice *= 1.1; // 10% increase
    }

    // Factor 2: Day of week
    if (DateTime.now().weekday >= 5) { // Weekend
      finalPrice *= 1.15; // 15% increase
    }

    // Factor 3: Current demand
    int activeOrders = await getActiveOrders(restaurantId);
    if (activeOrders > 10) {
      finalPrice *= 1.2; // 20% increase during high demand
    }

    return finalPrice;
  }

  Future<int> getActiveOrders(String restaurantId) async {
    QuerySnapshot activeOrders = await _firestore
        .collection('orders')
        .where('restaurantId', isEqualTo: restaurantId)
        .where('status', whereIn: ['preparing', 'delivering'])
        .get();

    return activeOrders.docs.length;
  }
}

================
File: lib/services/loyalty_service.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';

import '../models/loyalty.dart';

class LoyaltyService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> addPoints(String userId, double orderAmount) async {
    // Add 1 point per $1 spent
    int pointsToAdd = orderAmount.floor();

    await _firestore.collection('loyalty').doc(userId).update({
      'points': FieldValue.increment(pointsToAdd),
    });

    // Check and update tier if necessary
    await updateTier(userId);
  }

  Future<void> updateTier(String userId) async {
    DocumentSnapshot userLoyalty = await _firestore
        .collection('loyalty')
        .doc(userId)
        .get();

    int points = userLoyalty.get('points');
    LoyaltyTier newTier;

    if (points >= 1000) newTier = LoyaltyTier.platinum;
    else if (points >= 500) newTier = LoyaltyTier.gold;
    else if (points >= 200) newTier = LoyaltyTier.silver;
    else newTier = LoyaltyTier.bronze;

    await _firestore.collection('loyalty').doc(userId).update({
      'tier': newTier.index,
    });
  }
}

================
File: lib/services/notification_service.dart
================
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import '../global/navigation_service.dart';

class NotificationService {
  final FirebaseMessaging _fcm = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();

  Future<void> initialize() async {
    // Request permission
    await _fcm.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    // Get FCM token
    String? token = await _fcm.getToken();
    print('FCM Token: $token');

    // Initialize local notifications
    const initializationSettingsAndroid = AndroidInitializationSettings('@mipmap/ic_launcher');
    const initializationSettingsIOS = DarwinInitializationSettings();
    const initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    await _localNotifications.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onNotificationTap,
    );

    // Handle background messages
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

    // Handle foreground messages
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);
  }

  Future<void> _handleForegroundMessage(RemoteMessage message) async {
    print('Handling foreground message: ${message.messageId}');

    const androidDetails = AndroidNotificationDetails(
      'food_delivery_channel',
      'Food Delivery Notifications',
      importance: Importance.max,
      priority: Priority.high,
    );

    const iosDetails = DarwinNotificationDetails();

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _localNotifications.show(
      message.hashCode,
      message.notification?.title,
      message.notification?.body,
      details,
      payload: message.data['orderId'],
    );
  }

  void _onNotificationTap(NotificationResponse response) {
    // Handle notification tap
    if (response.payload != null) {
      // Navigate to order tracking screen
      navigatorKey.currentState?.pushNamed(
        '/order-tracking',
        arguments: response.payload,
      );
    }
  }
}

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  print('Handling background message: ${message.messageId}');
}

================
File: lib/services/payment_service.dart
================
// lib/services/payment_service.dart
import 'package:flutter/material.dart';
import 'package:flutter_stripe/flutter_stripe.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '/global/global.dart';

class PaymentService {
  static const String _secretKey = 'your_secret_key';

  static Future<void> makeStripePayment({
    required double totalAmount,
    required BuildContext context,
    required Function() onSuccess,
  }) async {
    try {
      // Create payment intent
      final paymentIntentData = await _createPaymentIntent(
          amount: (totalAmount * 100).round().toString(),
          currency: 'USD'
      );

      // Initialize payment sheet
      await Stripe.instance.initPaymentSheet(
        paymentSheetParameters: SetupPaymentSheetParameters(
          paymentIntentClientSecret: paymentIntentData['client_secret'],
          merchantDisplayName: 'Pamvotis Food Delivery',
          style: ThemeMode.system,
        ),
      );

      // Present payment sheet
      await Stripe.instance.presentPaymentSheet();

      // If we reach here, payment was successful
      onSuccess();
    } catch (e) {
      throw Exception('Payment failed: $e');
    }
  }

  static Future<Map<String, dynamic>> _createPaymentIntent(
      {required String amount, required String currency}
      ) async {
    try {
      final response = await http.post(
        Uri.parse('https://api.stripe.com/v1/payment_intents'),
        headers: {
          'Authorization': 'Bearer $_secretKey',
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: {
          'amount': amount,
          'currency': currency,
        },
      );

      return json.decode(response.body);
    } catch (e) {
      throw Exception('Failed to create payment intent: $e');
    }
  }
}

================
File: lib/services/promotion_service.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';

import '../models/promotion.dart';

class PromotionService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<double> calculateDiscount(String orderId, items, double subtotal) async {
    double discount = 0;

    // Get applicable promotions
    QuerySnapshot promoSnapshot = await _firestore
        .collection('promotions')
        .where('isActive', isEqualTo: true)
        .where('validUntil', isGreaterThan: DateTime.now())
        .get();

    for (var promo in promoSnapshot.docs) {
      Map<String, dynamic> promoData = promo.data() as Map<String, dynamic>;

      if (subtotal >= promoData['minimumOrderAmount']) {
        switch (PromotionType.values[promoData['type']]) {
          case PromotionType.percentageDiscount:
            discount = subtotal * (promoData['discountPercentage'] / 100);
            break;
          case PromotionType.freeDelivery:
            discount = 5.0; // Assuming fixed delivery fee
            break;
        // Add other promotion types
          case PromotionType.buyOneGetOne:
            // TODO: Handle this case.
          case PromotionType.firstOrder:
            // TODO: Handle this case.
          case PromotionType.bulkDiscount:
            // TODO: Handle this case.
        }
      }
    }
    return discount;
  }
}

================
File: lib/services/secure_storage.dart
================
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class SecureStorage {
  final FlutterSecureStorage _storage;

  SecureStorage([FlutterSecureStorage? storage])
      : _storage = storage ?? const FlutterSecureStorage();

  Future<void> write({required String key, required String value}) async {
    await _storage.write(key: key, value: value);
  }

  Future<String?> read({required String key}) async {
    return await _storage.read(key: key);
  }

  Future<void> delete({required String key}) async {
    await _storage.delete(key: key);
  }

  Future<void> deleteAll() async {
    await _storage.deleteAll();
  }

  Future<bool> containsKey({required String key}) async {
    return await _storage.containsKey(key: key);
  }
}

================
File: lib/services/session_service.dart
================
import 'dart:async';
import 'package:flutter/material.dart';
import '../authentication/auth_screen.dart';
import '../global/global.dart';
import 'secure_storage.dart';

class SessionService {
  static const int sessionTimeoutMinutes = 30;
  static Timer? _sessionTimer;
  final SecureStorage _secureStorage;
  final Duration _sessionTimeout;

  // Updated constructor with required parameters
  SessionService({
    required SecureStorage secureStorage,
    Duration? sessionTimeout,
  }) : _secureStorage = secureStorage,
        _sessionTimeout = sessionTimeout ?? const Duration(minutes: sessionTimeoutMinutes);

  Future<bool> isSessionValid() async {
    final lastActivity = await _secureStorage.read(key: 'last_activity');
    if (lastActivity == null) return false;

    final lastActivityTime = DateTime.parse(lastActivity);
    return DateTime.now().difference(lastActivityTime) < _sessionTimeout;
  }

  Future<void> updateLastActivity() async {
    await _secureStorage.write(
      key: 'last_activity',
      value: DateTime.now().toIso8601String(),
    );
  }

  static void initializeSession(BuildContext context) {
    _resetTimer(context);

    // Listen for user activity
    Listener(
      onPointerDown: (_) => _resetTimer(context),
      onPointerMove: (_) => _resetTimer(context),
      onPointerUp: (_) => _resetTimer(context),
      child: Focus(
        onFocusChange: (hasFocus) => _resetTimer(context),
        child: const SizedBox.expand(),
      ),
    );
  }

  static void _resetTimer(BuildContext context) {
    _sessionTimer?.cancel();
    _sessionTimer = Timer(const Duration(minutes: sessionTimeoutMinutes), () {
      _handleSessionTimeout(context);
    });
  }

  static Future<void> _handleSessionTimeout(BuildContext context) async {
    await firebaseAuth.signOut();
    await sharedPreferences!.clear();

    if (context.mounted) {
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (c) => AlertDialog(
          title: const Text('Session Expired'),
          content: const Text('Your session has expired. Please login again.'),
          actions: [
            TextButton(
              child: const Text('OK'),
              onPressed: () {
                Navigator.pushAndRemoveUntil(
                  context,
                  MaterialPageRoute(builder: (c) => const AuthScreen()),
                      (route) => false,
                );
              },
            ),
          ],
        ),
      );
    }
  }

  // Added dispose method
  void dispose() {
    _sessionTimer?.cancel();
    _sessionTimer = null;
  }

  Future<void> clearSession() async {
    _sessionTimer?.cancel();
    _sessionTimer = null;
    await _secureStorage.deleteAll();
  }
}

================
File: lib/splashScreen/splash_screen.dart
================
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:pamvotis_users_web/global/global.dart';
import '../authentication/auth_screen.dart';
import '../mainScreens/home_screen.dart';

class MySplashScreen extends StatefulWidget {
  const MySplashScreen({super.key});

  @override
  State<MySplashScreen> createState() => _MySplashScreenState();
}

class _MySplashScreenState extends State<MySplashScreen> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;
  Timer? _timer;

  @override
  void initState() {
    super.initState();
    _initializeAnimation();
    _checkUserStatus();
  }

  void _initializeAnimation() {
    _controller = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
        CurvedAnimation(parent: _controller, curve: Curves.easeIn)
    );

    _controller.forward();
  }

  Future<void> _checkUserStatus() async {
    _timer = Timer(const Duration(seconds: 3), () async {
      if (!mounted) return;

      try {
        final currentUser = firebaseAuth.currentUser;

        if (currentUser == null) {
          _navigateToScreen(const AuthScreen());
          return;
        }

        // Check user status in Firestore
        final userDoc = await FirebaseFirestore.instance
            .collection("users")
            .doc(currentUser.uid)
            .get();

        if (!mounted) return;

        if (!userDoc.exists || userDoc.data() == null) {
          await firebaseAuth.signOut();
          _navigateToScreen(const AuthScreen());
          return;
        }

        final userData = userDoc.data()!;
        if (userData["status"] != "approved") {
          await firebaseAuth.signOut();
          _navigateToScreen(const AuthScreen());
          return;
        }

        // User is approved, navigate to home
        _navigateToScreen(const HomeScreen());
      } catch (e) {
        debugPrint("Error during navigation: $e");
        if (!mounted) return;
        _navigateToScreen(const AuthScreen());
      }
    });
  }

  void _navigateToScreen(Widget screen) {
    if (!mounted) return;
    Navigator.pushReplacement(
      context,
      PageRouteBuilder(
        pageBuilder: (_, __, ___) => screen,
        transitionDuration: const Duration(milliseconds: 500),
        transitionsBuilder: (_, animation, __, child) {
          return FadeTransition(opacity: animation, child: child);
        },
      ),
    );
  }

  @override
  void dispose() {
    _timer?.cancel();
    _controller.dispose();
    super.dispose();
  }


  @override
  Widget build(BuildContext context) {
    return Material(
      child: Container(
        color: Colors.white,
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: LayoutBuilder(
              builder: (context, constraints) {
                double maxWidth = constraints.maxWidth > 600 ? 600 : constraints.maxWidth * 0.8;

                return Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Image.asset(
                        "images/logo.png",
                        width: maxWidth,
                        fit: BoxFit.contain,
                      ).animate()
                          .fadeIn(duration: 600.ms)
                          .scale(delay: 200.ms),
                      const SizedBox(height: 30),
                      const Text(
                        "Order food with ease",
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Colors.black54,
                          fontSize: 40,
                          fontFamily: "Lexend",
                          letterSpacing: 3,
                        ),
                      ).animate()
                          .fadeIn(delay: 300.ms)
                          .slideY(begin: 0.3, end: 0),
                    ],
                  ),
                );
              }
          ),
        ),
      ),
    );
  }
}

================
File: lib/utils/firebase_error_handler.dart
================
import 'package:firebase_auth/firebase_auth.dart';

class FirebaseErrorHandler {
  static String handleError(dynamic error) {
    if (error is FirebaseAuthException) {
      switch (error.code) {
        case 'user-not-found':
          return 'No user found with this email';
        case 'wrong-password':
          return 'Wrong password provided';
        case 'email-already-in-use':
          return 'Email is already registered';
        case 'invalid-email':
          return 'Invalid email address';
        case 'operation-not-allowed':
          return 'Operation not allowed';
        case 'weak-password':
          return 'The password provided is too weak';
        case 'user-disabled':
          return 'This user account has been disabled';
        default:
          return error.message ?? 'Authentication error occurred';
      }
    }

    if (error is FirebaseException) {
      switch (error.code) {
        case 'permission-denied':
          return 'You don\'t have permission to perform this action';
        case 'unavailable':
          return 'The service is currently unavailable';
        case 'not-found':
          return 'The requested resource was not found';
        case 'already-exists':
          return 'The resource already exists';
        default:
          return error.message ?? 'A Firebase error occurred';
      }
    }

    return error.toString();
  }
}

================
File: lib/utils/input_validator.dart
================
// lib/utils/input_validator.dart
class InputValidator {
  static String? validateEmail(String? email) {
    if (email == null || email.isEmpty) {
      return 'Email is required';
    }

    final emailRegex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$');
    if (!emailRegex.hasMatch(email)) {
      return 'Please enter a valid email address';
    }
    return null;
  }

  static String? validatePassword(String? password) {
    if (password == null || password.isEmpty) {
      return 'Password is required';
    }

    if (password.length < 8) {
      return 'Password must be at least 8 characters long';
    }

    if (!RegExp(r'[A-Z]').hasMatch(password)) {
      return 'Password must contain at least one uppercase letter';
    }

    if (!RegExp(r'[a-z]').hasMatch(password)) {
      return 'Password must contain at least one lowercase letter';
    }

    if (!RegExp(r'[0-9]').hasMatch(password)) {
      return 'Password must contain at least one number';
    }

    if (!RegExp(r'[!@#$%^&*(),.?":{}|<>]').hasMatch(password)) {
      return 'Password must contain at least one special character';
    }

    return null;
  }

  static String? validateName(String? name) {
    if (name == null || name.isEmpty) {
      return 'Name is required';
    }

    if (name.length < 2) {
      return 'Name must be at least 2 characters long';
    }

    if (RegExp(r'[0-9!@#$%^&*(),.?":{}|<>]').hasMatch(name)) {
      return 'Name cannot contain numbers or special characters';
    }

    return null;
  }

  static String sanitizeInput(String input) {
    return input.trim().replaceAll(RegExp(r'[<>]'), '');
  }
}

================
File: lib/utils/password_validator.dart
================
class PasswordValidator {
  static bool hasMinLength(String password) => password.length >= 8;
  static bool hasUppercase(String password) => password.contains(RegExp(r'[A-Z]'));
  static bool hasLowercase(String password) => password.contains(RegExp(r'[a-z]'));
  static bool hasDigits(String password) => password.contains(RegExp(r'[0-9]'));
  static bool hasSpecialCharacters(String password) =>
      password.contains(RegExp(r'[!@#$%^&*(),.?":{}|<>]'));

  static String? validate(String password) {
    if (!hasMinLength(password)) {
      return 'Password must be at least 8 characters long';
    }
    if (!hasUppercase(password)) {
      return 'Password must contain at least one uppercase letter';
    }
    if (!hasLowercase(password)) {
      return 'Password must contain at least one lowercase letter';
    }
    if (!hasDigits(password)) {
      return 'Password must contain at least one number';
    }
    if (!hasSpecialCharacters(password)) {
      return 'Password must contain at least one special character';
    }
    return null;
  }
}

================
File: lib/utils/rate_limiter.dart
================
class RateLimiter {
  static final Map<String, List<DateTime>> _loginAttempts = {};
  static const int _maxAttempts = 5;
  static const Duration _lockoutDuration = Duration(minutes: 15);

  static bool shouldAllowLogin(String email) {
    final now = DateTime.now();
    _loginAttempts[email] ??= [];

    // Remove old attempts
    _loginAttempts[email]!.removeWhere(
            (attempt) => now.difference(attempt) > _lockoutDuration
    );

    if (_loginAttempts[email]!.length >= _maxAttempts) {
      return false;
    }

    _loginAttempts[email]!.add(now);
    return true;
  }

  static Duration? getRemainingLockoutTime(String email) {
    if (!_loginAttempts.containsKey(email)) return null;

    final oldestAttempt = _loginAttempts[email]!.first;
    final lockoutEnd = oldestAttempt.add(_lockoutDuration);
    final remaining = lockoutEnd.difference(DateTime.now());

    return remaining.isNegative ? null : remaining;
  }
}

================
File: lib/widgets/address_design.dart
================
import 'package:flutter/material.dart';
import '/assistantMethods/address_changer.dart';
import '/mainScreens/placed_order_screen.dart';
import '/maps/maps.dart';
import '/models/address.dart';
import 'package:provider/provider.dart';

class AddressDesign extends StatefulWidget {
  final Address? model;
  final int? currentIndex;
  final int? value;
  final String? addressId;
  final double? totalAmount;
  final String? sellerUID;
  final String? paymentMethod;

  AddressDesign({
    this.model,
    this.currentIndex,
    this.value,
    this.addressId,
    this.totalAmount,
    this.sellerUID,
    this.paymentMethod = "cash_on_delivery",
  });

  @override
  State<AddressDesign> createState() => _AddressDesignState();
}

class _AddressDesignState extends State<AddressDesign> {
  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(12),
          onTap: () {
            Provider.of<AddressChanger>(context, listen: false)
                .displayResult(widget.value);
          },
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Radio(
                      groupValue: widget.currentIndex!,
                      value: widget.value!,
                      activeColor: Colors.blue,
                      onChanged: (val) {
                        Provider.of<AddressChanger>(context, listen: false)
                            .displayResult(val);
                      },
                    ),
                    Expanded(
                      child: _buildAddressDetails(),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton.icon(
                        icon: const Icon(Icons.map, size: 18),
                        label: const Text("Check on Maps"),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: Colors.blue,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                          side: const BorderSide(color: Colors.blue),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        onPressed: () {
                          MapsUtils.openMapWithPosition(
                              widget.model!.lat!, widget.model!.lng!);
                        },
                      ),
                    ),
                    if (widget.value ==
                        Provider.of<AddressChanger>(context).count) ...[
                      const SizedBox(width: 12),
                      Expanded(
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          onPressed: () {
                            Navigator.push(
                                context,
                                MaterialPageRoute(
                                    builder: (c) => PlacedOrderScreen(
                                      addressId: widget.addressId,
                                      totalAmount: widget.totalAmount,
                                      sellerUID: widget.sellerUID,
                                    )));
                          },
                          child: const Text(
                            "Proceed",
                            style: TextStyle(
                              color: Colors.white,
                              fontFamily: "Lexend",
                            ),
                          ),
                        ),
                      ),
                    ],
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildAddressDetails() {
    return Table(
      columnWidths: const {
        0: FlexColumnWidth(1.2),
        1: FlexColumnWidth(2),
      },
      children: [
        _buildTableRow("Name", widget.model!.name),
        _buildTableRow("Phone", widget.model!.phoneNumber),
        _buildTableRow("Flat", widget.model!.flatNumber),
        _buildTableRow("City", widget.model!.city),
        _buildTableRow("Country", widget.model!.state),
        _buildTableRow("Address", widget.model!.fullAddress),
      ],
    );
  }

  TableRow _buildTableRow(String label, String? value) {
    return TableRow(
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 4),
          child: Text(
            "$label:",
            style: const TextStyle(
              color: Colors.black87,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
              fontSize: 14,
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 4),
          child: Text(
            value ?? "",
            style: const TextStyle(
              color: Colors.black87,
              fontFamily: "Lexend",
              fontSize: 14,
            ),
          ),
        ),
      ],
    );
  }
}

================
File: lib/widgets/app_bar.dart
================
import 'package:flutter/material.dart';
import '/assistantMethods/cart_item_counter.dart';
import '/mainScreens/cart_screen.dart';
import 'package:provider/provider.dart';

class MyAppBar extends StatefulWidget implements PreferredSizeWidget{

  final PreferredSizeWidget? bottom;
  final String? sellerUID;

  MyAppBar({this.bottom, this.sellerUID});

  @override
  State<MyAppBar> createState() => _MyAppBarState();

  @override
  Size get preferredSize => bottom == null ? Size(56, AppBar().preferredSize.height) : Size(56, 80 + AppBar().preferredSize.height);
}

class _MyAppBarState extends State<MyAppBar> {
  @override
  Widget build(BuildContext context) {
    return AppBar(
      flexibleSpace: Container(
        decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [
                Colors.blue,
                Colors.blue,
              ],
              begin: FractionalOffset(0.0, 0.0),
              end: FractionalOffset(1.0, 0.0),
              stops: [0.0, 1.0],
              tileMode: TileMode.clamp,
            )
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.arrow_back),
        onPressed: (){
          Navigator.pop(context);
        },
      ),
      title: const Text(
        "Pamvotis",
        style: TextStyle(fontSize: 45, fontFamily: "Lexend"),
      ),
      centerTitle: true,
      automaticallyImplyLeading: true,
      actions: [
        Stack(
          children: [
            IconButton(
              icon: const Icon(Icons.shopping_cart, color: Colors.yellow,),
              onPressed: (){
                // send user to cart screen
                Navigator.push(context, MaterialPageRoute(builder: (c) => CartScreen(sellerUID: widget.sellerUID)));
              },
            ),
             Positioned(
              child: Stack(
                children: [
                  const Icon(
                    Icons.brightness_1,
                    size: 20.0,
                    color: Colors.yellow,
                  ),
                  Positioned(
                    top: 3,
                    right: 4,
                    child: Center(
                      child: Consumer<CartItemCounter>(
                        builder: (context, counter, c) {
                          return Text(
                            counter.count.toString(),
                            style: const TextStyle(color: Colors.blue, fontSize: 12),
                          );
                        },
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }
}

================
File: lib/widgets/cart_item_design.dart
================
import 'package:flutter/material.dart';
import '/models/items.dart';

class CartItemDesign extends StatefulWidget {

  final Items? model;
  BuildContext? context;
  final int? quanNumber;

  CartItemDesign({
    this.model,
    this.context,
    this.quanNumber,
  });

  @override
  State<CartItemDesign> createState() => _CartItemDesignState();
}

class _CartItemDesignState extends State<CartItemDesign> {
  @override
  Widget build(BuildContext context) {
    return InkWell(
      splashColor: Colors.blue,
      child: Padding(
        padding: const EdgeInsets.all(6.0),
        child: Container(
          height: 120,
          width: MediaQuery.of(context).size.width,
          child: Row(
            children: [
              Image.network(widget.model!.thumbnailUrl!, width: 140, height: 120,),
              const SizedBox(width: 6,),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    widget.model!.title!,
                    style: const TextStyle(
                      color: Colors.black,
                      fontSize: 16,
                      fontFamily: "kiwi",
                    ),
                  ),
                  const SizedBox(
                    height: 1.0,
                  ),
                  Row(
                    children: [
                      const Text(
                        "x ",
                        style: TextStyle(
                          color: Colors.black,
                          fontSize: 25,
                          fontFamily: "Acme",
                        ),
                      ),
                      Text(
                        widget.quanNumber.toString(),
                        style: const TextStyle(
                          color: Colors.black,
                          fontSize: 25,
                          fontFamily: "Acme",
                        ),
                      ),
                    ],
                  ),

                  Row(
                    children: [
                      const Text(
                        "Price: ",
                        style: TextStyle(
                          color: Colors.grey,
                          fontSize: 15,
                        ),
                      ),
                      const Text(
                        "€ ",
                        style: TextStyle(
                          color: Colors.blue,
                          fontSize: 16,
                        ),
                      ),
                      Text(
                        widget.model!.price.toString(),
                        style: const TextStyle(
                          color: Colors.blue,
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

================
File: lib/widgets/custom_text_field.dart
================
import 'package:flutter/material.dart';

class CustomTextField extends StatelessWidget {

  final TextEditingController? controller;
  final IconData? data;
  final String? hintText;
  bool? isObsecre = true;
  bool? enabled = true;

  CustomTextField({
    Key? key,
    this.controller,
    this.data,
    this.hintText,
    this.isObsecre,
    this.enabled,
  }): super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.all(Radius.circular(10)),
      ),
      padding: const EdgeInsets.all(8.0),
      margin: const EdgeInsets.all(10),
      child: TextFormField(
        enabled: enabled,
        controller: controller,
        obscureText: isObsecre!,
        cursorColor: Theme.of(context).primaryColor,
        decoration: InputDecoration(
          border: InputBorder.none,
          prefixIcon: Icon(
            data,
            color: Colors.blue,
          ),
          focusColor: Theme.of(context).primaryColor,
          hintText: hintText,
        ),
      ),
    );
  }
}

================
File: lib/widgets/error_dialog.dart
================
import 'package:flutter/material.dart';

class ErrorDialog extends StatelessWidget {

  final String? message;
  ErrorDialog({this.message});

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      key: key,
      content: Text(message!),
      actions: [
        ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.red,
          ),
          onPressed: () {
            Navigator.pop(context);
          },
          child: const Center(
            child: Text("OK"),
          ),
        ),
      ],
    );
  }
}

================
File: lib/widgets/items_design.dart
================
import 'package:flutter/material.dart';
import '/mainScreens/item_detail_screen.dart';
import '/models/items.dart';

class ItemsDesignWidget extends StatefulWidget {
  final Items? model;
  final BuildContext? context;

  ItemsDesignWidget({this.model, this.context});

  @override
  State<ItemsDesignWidget> createState() => _ItemsDesignWidgetState();
}

class _ItemsDesignWidgetState extends State<ItemsDesignWidget> {
  bool isHovered = false;

  @override
  Widget build(BuildContext context) {
    return MouseRegion(
      onEnter: (_) => setState(() => isHovered = true),
      onExit: (_) => setState(() => isHovered = false),
      child: GestureDetector(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (c) => ItemDetailScreen(model: widget.model),
            ),
          );
        },
        child: Container(
          margin: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(15),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(isHovered ? 0.1 : 0.05),
                spreadRadius: isHovered ? 3 : 1,
                blurRadius: isHovered ? 10 : 5,
                offset: Offset(0, isHovered ? 5 : 2),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Image Container
              ClipRRect(
                borderRadius: const BorderRadius.vertical(
                  top: Radius.circular(15),
                ),
                child: Stack(
                  children: [
                    Image.network(
                      widget.model!.thumbnailUrl!,
                      height: 200,
                      width: double.infinity,
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) {
                        return Container(
                          height: 200,
                          color: Colors.grey[100],
                          child: const Center(
                            child: Icon(
                              Icons.error_outline,
                              color: Colors.grey,
                              size: 40,
                            ),
                          ),
                        );
                      },
                    ),
                    Positioned(
                      bottom: 0,
                      left: 0,
                      right: 0,
                      child: Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.bottomCenter,
                            end: Alignment.topCenter,
                            colors: [
                              Colors.black.withOpacity(0.6),
                              Colors.transparent,
                            ],
                          ),
                        ),
                        padding: const EdgeInsets.symmetric(
                          vertical: 10,
                          horizontal: 15,
                        ),
                        child: Text(
                          "€${widget.model!.price}",
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            fontFamily: "Lexend",
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),

              // Content Container
              Padding(
                padding: const EdgeInsets.all(15),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      widget.model!.title!,
                      style: const TextStyle(
                        color: Colors.black87,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        fontFamily: "Lexend",
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      widget.model!.shortInfo!,
                      style: TextStyle(
                        color: Colors.grey.shade600,
                        fontSize: 14,
                        fontFamily: "Lexend",
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 15),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        _buildInfoChip(
                          Icons.access_time,
                          "20-30 min",
                        ),
                        Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 6,
                          ),
                          decoration: BoxDecoration(
                            color: Colors.blue.shade50,
                            borderRadius: BorderRadius.circular(20),
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(
                                Icons.shopping_cart,
                                size: 16,
                                color: Colors.blue.shade700,
                              ),
                              const SizedBox(width: 4),
                              Text(
                                "Add to Cart",
                                style: TextStyle(
                                  color: Colors.blue.shade700,
                                  fontSize: 12,
                                  fontFamily: "Lexend",
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildInfoChip(IconData icon, String label) {
    return Container(
      padding: const EdgeInsets.symmetric(
        horizontal: 12,
        vertical: 6,
      ),
      decoration: BoxDecoration(
        color: Colors.grey.shade100,
        borderRadius: BorderRadius.circular(20),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 16,
            color: Colors.grey.shade700,
          ),
          const SizedBox(width: 4),
          Text(
            label,
            style: TextStyle(
              color: Colors.grey.shade700,
              fontSize: 12,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }
}

================
File: lib/widgets/loading_dialog.dart
================
import 'package:flutter/material.dart';

import 'progress_bar.dart';

class LoadingDialog extends StatelessWidget {

  final String? message;

  LoadingDialog({this.message});

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      key: key,
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          circularProgress(),
          const SizedBox(height: 10,),
          Text(message! + ", Please Wait..."),
        ],
      ),
    );
  }
}

================
File: lib/widgets/menus_design.dart
================
import 'package:flutter/material.dart';
import '/mainScreens/items_screen.dart';
import '/models/menus.dart';
import '/models/sellers.dart';

class MenusDesignWidget extends StatefulWidget {

  Menus? model;
  BuildContext? context;

  MenusDesignWidget({this.model, this.context});

  @override
  State<MenusDesignWidget> createState() => _MenusDesignWidgetState();
}

class _MenusDesignWidgetState extends State<MenusDesignWidget> {
  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: (){
        Navigator.push(context, MaterialPageRoute(builder: (c) => ItemsScreen(model: widget.model)));
      },
      splashColor: Colors.blue,
      child: Padding(
        padding: const EdgeInsets.all(5.0),
        child: Container(
          height: 420,
          width: MediaQuery.of(context).size.width,
          child: Column(
            children: [
              Divider(
                height: 4,
                thickness: 3,
                color: Colors.grey[300],
              ),
              Image.network(
                widget.model!.thumbnailUrl!,
                height: 270.0,
                fit: BoxFit.cover,
              ),
              const SizedBox(height: 2.0,),
              Text(
                widget.model!.menuTitle!,
                style: const TextStyle(
                  color: Colors.blue,
                  fontSize: 20,
                  fontFamily: "Lexend",
                ),
              ),
              Text(
                widget.model!.menuInfo!,
                style: const TextStyle(
                  color: Colors.blue,
                  fontSize: 20,
                  fontFamily: "Lexend",
                ),
              ),
              Divider(
                height: 4,
                thickness: 3,
                color: Colors.grey[300],
              )
            ],
          ),
        ),
      ),
    );
  }
}

================
File: lib/widgets/my_drawer.dart
================
import 'package:flutter/material.dart';
import '/authentication/auth_screen.dart';
import '/global/global.dart';
import '/mainScreens/address_screen.dart';
import '/mainScreens/history_screen.dart';
import '/mainScreens/home_screen.dart';
import '/mainScreens/my_orders_screen.dart';
import '/mainScreens/search_screen.dart';

class MyDrawer extends StatefulWidget {
  const MyDrawer({Key? key}) : super(key: key);

  @override
  State<MyDrawer> createState() => _MyDrawerState();
}

class _MyDrawerState extends State<MyDrawer> {
  String userName = "Guest User";
  String userEmail = "";
  String userPhotoUrl = "";

  @override
  void initState() {
    super.initState();
    loadUserData();
  }

  Future<void> loadUserData() async {
    try {
      if (firebaseAuth.currentUser != null && sharedPreferences != null) {
        setState(() {
          userName = sharedPreferences!.getString("name") ?? "Guest User";
          userEmail = sharedPreferences!.getString("email") ?? "";
          userPhotoUrl = sharedPreferences!.getString("photoUrl") ?? "";
        });
      }
    } catch (error) {
      debugPrint("Error loading user data: $error");
    }
  }

  @override
  Widget build(BuildContext context) {
    return NavigationDrawer(
      elevation: 16,
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      onDestinationSelected: (int index) {
        // Close the drawer before navigation
        Navigator.pop(context);
        // Handle the navigation
        _handleNavigation(context, index);
      },
      children: [
        Padding(
          padding: const EdgeInsets.fromLTRB(16, 28, 16, 16),
          child: Column(
            children: [
              Material(
                borderRadius: const BorderRadius.all(Radius.circular(80)),
                elevation: 8,
                child: Container(
                  height: 160,
                  width: 160,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    image: DecorationImage(
                      fit: BoxFit.cover,
                      image: NetworkImage(
                        userPhotoUrl.isNotEmpty
                            ? userPhotoUrl
                            : "https://placeholder.com/user.png",
                      ),
                      onError: (_, __) => const Icon(Icons.person),
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                userName,
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  fontFamily: "Lexend",
                ),
                textAlign: TextAlign.center,
              ),
              if (userEmail.isNotEmpty)
                Text(
                  userEmail,
                  style: Theme.of(context).textTheme.bodyMedium,
                  textAlign: TextAlign.center,
                ),
            ],
          ),
        ),
        const Divider(height: 1, thickness: 1),
        const NavigationDrawerDestination(
          icon: Icon(Icons.home),
          label: Text('Home'),
        ),
        const NavigationDrawerDestination(
          icon: Icon(Icons.reorder),
          label: Text('My Orders'),
        ),
        const NavigationDrawerDestination(
          icon: Icon(Icons.access_time),
          label: Text('History'),
        ),
        const NavigationDrawerDestination(
          icon: Icon(Icons.search),
          label: Text('Search'),
        ),
        const NavigationDrawerDestination(
          icon: Icon(Icons.add_location),
          label: Text('Add New Address'),
        ),
        const Divider(height: 1, thickness: 1),
        const NavigationDrawerDestination(
          icon: Icon(Icons.exit_to_app),
          label: Text('Sign Out'),
        ),
      ],
    );
  }

  void _handleNavigation(BuildContext context, int index) {
    switch (index) {
      case 0:
        Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (c) => const HomeScreen())
        );
        break;
      case 1:
        Navigator.push(
            context,
            MaterialPageRoute(builder: (c) => MyOrdersScreen())
        );
        break;
      case 2:
        Navigator.push(
            context,
            MaterialPageRoute(builder: (c) => HistoryScreen())
        );
        break;
      case 3:
        Navigator.push(
            context,
            MaterialPageRoute(builder: (c) => const SearchScreen())
        );
        break;
      case 4:
        Navigator.push(
            context,
            MaterialPageRoute(builder: (c) => AddressScreen())
        );
        break;
      case 5:
        _handleSignOut(context);
        break;
    }
  }

  Future<void> _handleSignOut(BuildContext context) async {
    try {
      // Clear shared preferences
      await sharedPreferences?.clear();

      // Sign out from Firebase
      await firebaseAuth.signOut();

      if (!mounted) return;

      // Navigate to auth screen
      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (c) => const AuthScreen()),
            (route) => false,
      );
    } catch (error) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error signing out: $error')),
      );
    }
  }
}

================
File: lib/widgets/order_card.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '/mainScreens/order_details_screen.dart';
import '/models/items.dart';

class OrderCard extends StatelessWidget {
  final int? itemCount;
  final List<DocumentSnapshot>? data;
  final String? orderID;
  final List<String>? separateQuantitiesList;

  OrderCard({
    this.itemCount,
    this.data,
    this.orderID,
    this.separateQuantitiesList,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 15, vertical: 8),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(15),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(15),
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (c) => OrderDetailsScreen(orderID: orderID),
            ),
          );
        },
        child: Column(
          children: [
            _buildOrderHeader(),
            Container(
              constraints: BoxConstraints(
                maxHeight: itemCount! * 130.0,
              ),
              child: ListView.builder(
                itemCount: itemCount,
                physics: const NeverScrollableScrollPhysics(),
                padding: EdgeInsets.zero,
                itemBuilder: (context, index) {
                  Items model = Items.fromJson(
                    data![index].data()! as Map<String, dynamic>,
                  );
                  return _buildOrderItem(
                    model,
                    context,
                    separateQuantitiesList![index],
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOrderHeader() {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(15)),
      ),
      child: Row(
        children: [
          const Icon(Icons.shopping_bag, color: Colors.blue, size: 24),
          const SizedBox(width: 10),
          Expanded(
            child: Text(
              "Order #${orderID!.substring(0, 8)}...",
              style: const TextStyle(
                fontFamily: "Lexend",
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              color: Colors.blue.shade100,
              borderRadius: BorderRadius.circular(20),
            ),
            child: Text(
              "$itemCount items",
              style: TextStyle(
                color: Colors.blue.shade700,
                fontSize: 14,
                fontFamily: "Lexend",
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrderItem(Items model, BuildContext context, String quantity) {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: Colors.grey.shade200),
        ),
      ),
      child: Row(
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: Image.network(
              model.thumbnailUrl!,
              width: 80,
              height: 80,
              fit: BoxFit.cover,
              errorBuilder: (context, error, stackTrace) {
                return Container(
                  width: 80,
                  height: 80,
                  color: Colors.grey.shade200,
                  child: const Icon(
                    Icons.error_outline,
                    color: Colors.grey,
                  ),
                );
              },
            ),
          ),
          const SizedBox(width: 15),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  model.title!,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    fontFamily: "Lexend",
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 10,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.grey.shade100,
                        borderRadius: BorderRadius.circular(15),
                      ),
                      child: Row(
                        children: [
                          const Icon(
                            Icons.shopping_cart,
                            size: 16,
                            color: Colors.grey,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            "Qty: $quantity",
                            style: const TextStyle(
                              color: Colors.grey,
                              fontSize: 14,
                              fontFamily: "Lexend",
                            ),
                          ),
                        ],
                      ),
                    ),
                    Text(
                      "€${model.price}",
                      style: const TextStyle(
                        color: Colors.blue,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        fontFamily: "Lexend",
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

================
File: lib/widgets/progress_bar.dart
================
import 'package:flutter/material.dart';

circularProgress(){
  return Container(
    alignment: Alignment.center,
    padding: const EdgeInsets.only(top: 12),
    child: const CircularProgressIndicator(
      valueColor: AlwaysStoppedAnimation(
        Colors.yellow,
      ),
    ),
  );
}

================
File: lib/widgets/review_dialog.dart
================
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';

import '../models/review.dart';

class AddReviewDialog extends StatefulWidget {
  final String itemId;

  const AddReviewDialog({Key? key, required this.itemId}) : super(key: key);

  @override
  State<AddReviewDialog> createState() => _AddReviewDialogState();
}

class _AddReviewDialogState extends State<AddReviewDialog> {
  final _commentController = TextEditingController();
  double _rating = 0;

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Add Review'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          RatingBar.builder(
            initialRating: _rating,
            minRating: 1,
            direction: Axis.horizontal,
            itemCount: 5,
            itemBuilder: (context, _) => const Icon(
              Icons.star,
              color: Colors.amber,
            ),
            onRatingUpdate: (rating) {
              setState(() => _rating = rating);
            },
          ),
          const SizedBox(height: 16),
          TextField(
            controller: _commentController,
            decoration: const InputDecoration(
              hintText: 'Write your review...',
              border: OutlineInputBorder(),
            ),
            maxLines: 3,
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: () async {
            final review = Review(
              id: DateTime.now().millisecondsSinceEpoch.toString(),
              userId: FirebaseAuth.instance.currentUser!.uid,
              itemId: widget.itemId,
              rating: _rating,
              comment: _commentController.text,
              createdAt: DateTime.now(),
            );

            await FirebaseFirestore.instance
                .collection('reviews')
                .doc(review.id)
                .set(review.toMap());

            Navigator.pop(context);
          },
          child: const Text('Submit'),
        ),
      ],
    );
  }
}

================
File: lib/widgets/sellers_design.dart
================
import 'package:flutter/material.dart';
import '/mainScreens/menus_screen.dart';
import '/models/sellers.dart';

class SellersDesignWidget extends StatefulWidget {
  final Sellers? model;
  final BuildContext? context;

  const SellersDesignWidget({
    Key? key,
    this.model,
    this.context,
  }) : super(key: key);

  @override
  State<SellersDesignWidget> createState() => _SellersDesignWidgetState();
}

class _SellersDesignWidgetState extends State<SellersDesignWidget> {
  bool isHovered = false;

  void navigateToMenuScreen() {
    if (widget.model != null) {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (c) => MenusScreen(model: widget.model),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: InkWell( // Changed from GestureDetector to InkWell for better feedback
        onTap: navigateToMenuScreen,
        child: MouseRegion(
          onEnter: (_) => setState(() => isHovered = true),
          onExit: (_) => setState(() => isHovered = false),
          child: Card(
            elevation: isHovered ? 8 : 4,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(15),
            ),
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(15),
                color: Colors.white,
                boxShadow: [
                  if (isHovered)
                    BoxShadow(
                      color: Colors.blue.withOpacity(0.1),
                      blurRadius: 10,
                      spreadRadius: 2,
                    ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Restaurant Image
                  ClipRRect(
                    borderRadius: const BorderRadius.vertical(
                      top: Radius.circular(15),
                    ),
                    child: Stack(
                      children: [
                        // Main Image
                        Image.network(
                          widget.model?.sellerAvatarUrl ?? '',
                          height: 200,
                          width: double.infinity,
                          fit: BoxFit.cover,
                          errorBuilder: (context, error, stackTrace) {
                            return Container(
                              height: 200,
                              color: Colors.grey[100],
                              child: const Center(
                                child: Icon(
                                  Icons.restaurant,
                                  color: Colors.grey,
                                  size: 50,
                                ),
                              ),
                            );
                          },
                          loadingBuilder: (context, child, loadingProgress) {
                            if (loadingProgress == null) return child;
                            return Container(
                              height: 200,
                              color: Colors.grey[100],
                              child: const Center(
                                child: CircularProgressIndicator(),
                              ),
                            );
                          },
                        ),
                        // Gradient Overlay
                        Positioned(
                          bottom: 0,
                          left: 0,
                          right: 0,
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              gradient: LinearGradient(
                                begin: Alignment.bottomCenter,
                                end: Alignment.topCenter,
                                colors: [
                                  Colors.black.withOpacity(0.8),
                                  Colors.transparent,
                                ],
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  widget.model?.sellerName ?? 'Restaurant Name',
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 24,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                if (widget.model?.sellerEmail != null)
                                  Text(
                                    widget.model!.sellerEmail!,
                                    style: TextStyle(
                                      color: Colors.white.withOpacity(0.8),
                                      fontSize: 14,
                                    ),
                                  ),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  // Restaurant Info
                  Padding(
                    padding: const EdgeInsets.all(16),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        _buildInfoChip(
                          Icons.access_time,
                          "20-30 min",
                          Colors.green,
                        ),
                        _buildInfoChip(
                          Icons.star,
                          "4.5",
                          Colors.amber,
                        ),
                        ElevatedButton.icon(
                          onPressed: navigateToMenuScreen,
                          icon: const Icon(Icons.menu_book),
                          label: const Text("View Menu"),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                            foregroundColor: Colors.white,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(20),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildInfoChip(IconData icon, String label, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: color),
          const SizedBox(width: 4),
          Text(
            label,
            style: TextStyle(
              color: color,
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
}

================
File: lib/widgets/shipment_address_design.dart
================
import 'package:flutter/material.dart';
import '/mainScreens/home_screen.dart';
import '/models/address.dart';

class ShipmentAddressDesign extends StatelessWidget {
  final Address? model;
  final String? orderStatus;
  final String? orderId;
  final String? sellerId;
  final String? orderByUser;

  const ShipmentAddressDesign({
    Key? key,
    this.model,
    this.orderStatus,
    this.orderId,
    this.sellerId,
    this.orderByUser,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildHeader(),
          _buildAddressDetails(),
          _buildFullAddress(),
          _buildActionButton(context),
        ],
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(15),
        ),
      ),
      child: Row(
        children: [
          Icon(
            Icons.location_on,
            color: Colors.blue.shade700,
            size: 24,
          ),
          const SizedBox(width: 10),
          const Text(
            "Shipping Details",
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: "Lexend",
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAddressDetails() {
    return Container(
      padding: const EdgeInsets.all(15),
      child: Column(
        children: [
          _buildDetailRow("Name", model!.name!),
          const SizedBox(height: 10),
          _buildDetailRow("Phone", model!.phoneNumber!),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Row(
      children: [
        Expanded(
          flex: 2,
          child: Text(
            label,
            style: TextStyle(
              color: Colors.grey.shade600,
              fontSize: 14,
              fontFamily: "Lexend",
            ),
          ),
        ),
        Expanded(
          flex: 3,
          child: Text(
            value,
            style: const TextStyle(
              color: Colors.black87,
              fontSize: 16,
              fontFamily: "Lexend",
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildFullAddress() {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        border: Border(
          top: BorderSide(
            color: Colors.grey.shade200,
          ),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Full Address",
            style: TextStyle(
              color: Colors.grey.shade600,
              fontSize: 14,
              fontFamily: "Lexend",
            ),
          ),
          const SizedBox(height: 8),
          Text(
            model!.fullAddress!,
            style: const TextStyle(
              color: Colors.black87,
              fontSize: 16,
              fontFamily: "Lexend",
              height: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButton(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        border: Border(
          top: BorderSide(
            color: Colors.grey.shade200,
          ),
        ),
      ),
      child: SizedBox(
        width: double.infinity,
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: orderStatus == "ended"
                ? Colors.blue
                : Colors.green,
            padding: const EdgeInsets.symmetric(vertical: 15),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (c) => const HomeScreen(),
              ),
            );
          },
          child: Text(
            orderStatus == "ended" ? "Go Back" : "Order Packing - Done",
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontFamily: "Lexend",
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ),
    );
  }
}

================
File: lib/widgets/simple_app_bar.dart
================
import 'package:flutter/material.dart';

class SimpleAppBar extends StatelessWidget implements PreferredSizeWidget{

  String? title;
  final PreferredSizeWidget? bottom;

  SimpleAppBar({this.bottom, this.title});

  @override
  Size get preferredSize => bottom == null ? Size(56, AppBar().preferredSize.height) : Size(56, 80 + AppBar().preferredSize.height);

  @override
  Widget build(BuildContext context) {
    return AppBar(
      iconTheme: const IconThemeData(
        color: Colors.white,
      ),
      flexibleSpace: Container(
        decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [
                Colors.blue,
                Colors.blue,
              ],
              begin: FractionalOffset(0.0, 0.0),
              end: FractionalOffset(1.0, 0.0),
              stops: [0.0, 1.0],
              tileMode: TileMode.clamp,
            )
        ),
      ),
      title: Text(
        title!,
        style: const TextStyle(fontSize: 36, letterSpacing: 3, fontFamily: "Lexend", color: Colors.white),
      ),
      centerTitle: true,
      backgroundColor: Colors.blue,
    );
  }
}

================
File: lib/widgets/status_banner.dart
================
import 'package:flutter/material.dart';
import '/mainScreens/home_screen.dart';

class StatusBanner extends StatelessWidget {
  final bool? status;
  final String? orderStatus;

  const StatusBanner({
    Key? key,
    this.status,
    this.orderStatus,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final isDelivered = orderStatus == "ended";
    final statusMessage = isDelivered ? "Order Delivered" : "Order Placed";
    final resultMessage = status! ? "Successful" : "Unsuccessful";
    final statusColor = status! ? Colors.green : Colors.red;
    final iconData = status! ? Icons.check_circle : Icons.cancel;

    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.blue.shade400,
            Colors.blue.shade600,
          ],
          begin: const FractionalOffset(0.0, 0.0),
          end: const FractionalOffset(1.0, 0.0),
        ),
        borderRadius: const BorderRadius.vertical(
          top: Radius.circular(15),
        ),
      ),
      padding: const EdgeInsets.symmetric(
        horizontal: 20,
        vertical: 15,
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            children: [
              MouseRegion(
                cursor: SystemMouseCursors.click,
                child: GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => const HomeScreen(),
                      ),
                    );
                  },
                  child: Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: const Icon(
                      Icons.arrow_back,
                      color: Colors.white,
                      size: 20,
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 15),
              Expanded(
                child: Text(
                  statusMessage,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: "Lexend",
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 6,
                ),
                decoration: BoxDecoration(
                  color: statusColor.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      iconData,
                      color: statusColor,
                      size: 16,
                    ),
                    const SizedBox(width: 6),
                    Text(
                      resultMessage,
                      style: TextStyle(
                        color: statusColor,
                        fontSize: 14,
                        fontFamily: "Lexend",
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          if (isDelivered) ...[
            const SizedBox(height: 10),
            Container(
              padding: const EdgeInsets.symmetric(
                horizontal: 12,
                vertical: 6,
              ),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.1),
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(
                    Icons.access_time,
                    color: Colors.white,
                    size: 16,
                  ),
                  SizedBox(width: 6),
                  Text(
                    "Delivered",
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                      fontFamily: "Lexend",
                    ),
                  ),
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }
}

================
File: lib/widgets/text_field.dart
================
import 'package:flutter/material.dart';

class MyTextField extends StatelessWidget {
  final String? hint;
  final TextEditingController? controller;
  final IconData? prefixIcon;
  final bool isObscure;
  final TextInputType? keyboardType;
  final int maxLines;
  final bool readOnly;
  final VoidCallback? onTap;
  final String? Function(String?)? validator;
  final void Function(String)? onChanged;

  const MyTextField({
    super.key,
    this.hint,
    this.controller,
    this.prefixIcon,
    this.isObscure = false,
    this.keyboardType,
    this.maxLines = 1,
    this.readOnly = false,
    this.onTap,
    this.validator,
    this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextFormField(
        controller: controller,
        obscureText: isObscure,
        keyboardType: keyboardType,
        maxLines: maxLines,
        readOnly: readOnly,
        onTap: onTap,
        onChanged: onChanged,
        style: const TextStyle(
          fontFamily: "Lexend",
          fontSize: 16,
          color: Colors.black87,
        ),
        decoration: InputDecoration(
          hintText: hint,
          hintStyle: TextStyle(
            fontFamily: "Lexend",
            fontSize: 16,
            color: Colors.grey.shade400,
          ),
          prefixIcon: prefixIcon != null
              ? Icon(
            prefixIcon,
            color: Colors.blue,
            size: 22,
          )
              : null,
          filled: true,
          fillColor: Colors.grey.shade50,
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 12,
          ),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide.none,
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(
              color: Colors.blue.shade400,
              width: 2,
            ),
          ),
          errorBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(
              color: Colors.red.shade400,
              width: 1,
            ),
          ),
          focusedErrorBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(
              color: Colors.red.shade400,
              width: 2,
            ),
          ),
          errorStyle: const TextStyle(
            fontFamily: "Lexend",
            fontSize: 12,
          ),
        ),
        validator: validator ?? (value) {
          if (value == null || value.isEmpty) {
            return 'This field is required';
          }
          return null;
        },
      ),
    );
  }
}

================
File: lib/widgets/text_widget_header.dart
================
import 'package:flutter/material.dart';

class TextWidgetHeader extends SliverPersistentHeaderDelegate {

  String? title;
  TextWidgetHeader({this.title});

  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent,) {
    return InkWell(
      child: Container(
        decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [
                Colors.blue,
                Colors.blue,
              ],
              begin: FractionalOffset(0.0, 0.0),
              end: FractionalOffset(1.0, 0.0),
              stops: [0.0, 1.0],
              tileMode: TileMode.clamp,
            )
        ),
        height: 80.0,
        width: MediaQuery.of(context).size.width,
        alignment: Alignment.center,
        child:  InkWell(
          child: Text(
            title!,
            maxLines: 2,
            textAlign: TextAlign.center,
            style: const TextStyle(
              fontFamily: "Lexend",
              fontSize: 28,
              letterSpacing: 2,
              color: Colors.white54,
            ),
          ),
        ),
      ),
    );
  }

  @override
  // TODO: implement maxExtent
  double get maxExtent => 50;

  @override
  // TODO: implement minExtent
  double get minExtent => 50;

  @override
  bool shouldRebuild(covariant SliverPersistentHeaderDelegate oldDelegate)  => true;
}

================
File: lib/main.dart
================
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

// Models
import 'models/user_model.dart';
import 'models/operation.dart';

// Core
import 'core/network_info.dart';
import 'core/result.dart';

// Services
import 'services/storage/storage_service.dart';
import 'services/storage/storage_service_factory.dart';
import 'services/secure_storage.dart';
import 'services/session_service.dart';

// Repositories
import 'repositories/user_repository.dart';
import 'repositories/auth_repository.dart';

// State Management
import 'assistantMethods/address_changer.dart';
import 'assistantMethods/cart_item_counter.dart';
import 'assistantMethods/total_amount.dart';

// Screens
import 'authentication/auth_screen.dart';
import 'splashScreen/splash_screen.dart';

// Global
import 'global/global.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  try {
    // Initialize Firebase
    await Firebase.initializeApp(
        options: const FirebaseOptions(
            
        )
    );

    // Initialize Services
    final storageService = await StorageServiceFactory.create();
    final secureStorage = SecureStorage();
    final networkInfo = NetworkInfo();
    final sessionService = SessionService(
      secureStorage: secureStorage,
      sessionTimeout: const Duration(minutes: 30),
    );

    // Initialize Repositories with storage service
    final userRepository = UserRepository(
      storageService: storageService,
      networkInfo: networkInfo,
    );

    final authRepository = AuthRepository(
      storageService: storageService,
      secureStorage: secureStorage,
      networkInfo: networkInfo,
    );

    runApp(MyApp(
      storageService: storageService,
      secureStorage: secureStorage,
      networkInfo: networkInfo,
      sessionService: sessionService,
      userRepository: userRepository,
      authRepository: authRepository,
    ));

  } catch (e) {
    print('Initialization error: $e');
  }
}

class MyApp extends StatefulWidget {
  final StorageService storageService;
  final SecureStorage secureStorage;
  final NetworkInfo networkInfo;
  final SessionService sessionService;
  final UserRepository userRepository;
  final AuthRepository authRepository;

  const MyApp({
    super.key,
    required this.storageService,
    required this.secureStorage,
    required this.networkInfo,
    required this.sessionService,
    required this.userRepository,
    required this.authRepository,
  });

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void dispose() {
    widget.sessionService.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // Services
        Provider<StorageService>.value(value: widget.storageService),
        Provider<SecureStorage>.value(value: widget.secureStorage),
        Provider<NetworkInfo>.value(value: widget.networkInfo),
        Provider<SessionService>.value(value: widget.sessionService),

        // Repositories
        Provider<UserRepository>.value(value: widget.userRepository),
        Provider<AuthRepository>.value(value: widget.authRepository),

        // State Management
        ChangeNotifierProvider(create: (_) => CartItemCounter()),
        ChangeNotifierProvider(create: (_) => TotalAmount()),
        ChangeNotifierProvider(create: (_) => AddressChanger()),
      ],
      child: MaterialApp(
        title: 'Pamvotis',
        debugShowCheckedModeBanner: false,
        localizationsDelegates: const [
          AppLocalizations.delegate,
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        supportedLocales: const [
          Locale('en'),
          Locale('el'),
        ],
        locale: const Locale('el'),
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
          useMaterial3: true,
        ),
        home: FutureBuilder<bool>(
          future: widget.sessionService.isSessionValid(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const MySplashScreen();
            }
            return snapshot.data == true
                ? const MySplashScreen()
                : const AuthScreen();
          },
        ),
      ),
    );
  }
}

================
File: test/widget_test.dart
================
// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:pamvotis_users_web/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}

================
File: web/index.html
================
<!DOCTYPE html>
<html>
<head>
  <!--
    If you are serving your web app in a path other than the root, change the
    href value below to reflect the base path you are serving from.

    The path provided below has to start and end with a slash "/" in order for
    it to work correctly.

    For more details:
    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base

    This is a placeholder for base href that will be replaced by the value of
    the `--base-href` argument provided to `flutter build`.
  -->
  <base href="$FLUTTER_BASE_HREF">

  <meta charset="UTF-8">
  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  <meta name="description" content="the pamvotis app now on a website">

  <!-- iOS meta tags & icons -->
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="pamvotis_users_web">
  <link rel="apple-touch-icon" href="icons/Icon-192.png">
  <meta name="mobile-web-app-capable" content="yes">

  <!-- Add this meta tag -->
  <meta name="Cross-Origin-Opener-Policy" content="same-origin">

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="favicon.png"/>

  <title>pamvotis_users_web</title>
  <link rel="manifest" href="manifest.json">
</head>
<body>
  <script src="flutter_bootstrap.js" async></script>
</body>
</html>

================
File: web/manifest.json
================
{
    "name": "pamvotis_users_web",
    "short_name": "pamvotis_users_web",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#0175C2",
    "theme_color": "#0175C2",
    "description": "the pamvotis app now on a website",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-maskable-192.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "maskable"
        },
        {
            "src": "icons/Icon-maskable-512.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "maskable"
        }
    ]
}




================
File: l10n.yaml
================
arb-dir: lib/l10n
template-arb-file: app_en.arb
output-localization-file: app_localizations.dart
nullable-getter: false

================
File: pubspec.lock
================
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  _fe_analyzer_shared:
    dependency: transitive
    description:
      name: _fe_analyzer_shared
      sha256: ae92f5d747aee634b87f89d9946000c2de774be1d6ac3e58268224348cd0101a
      url: "https://pub.dev"
    source: hosted
    version: "61.0.0"
  _flutterfire_internals:
    dependency: transitive
    description:
      name: _flutterfire_internals
      sha256: "5a0296da7ae717ffb7444dee8439ca25ac80e162a345b933aa57f0a4a48dca2c"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.45"
  analyzer:
    dependency: transitive
    description:
      name: analyzer
      sha256: ea3d8652bda62982addfd92fdc2d0214e5f82e43325104990d4f4c4a2a313562
      url: "https://pub.dev"
    source: hosted
    version: "5.13.0"
  args:
    dependency: transitive
    description:
      name: args
      sha256: bf9f5caeea8d8fe6721a9c358dd8a5c1947b27f1cfaa18b39c301273594919e6
      url: "https://pub.dev"
    source: hosted
    version: "2.6.0"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  build:
    dependency: transitive
    description:
      name: build
      sha256: "80184af8b6cb3e5c1c4ec6d8544d27711700bc3e6d2efad04238c7b5290889f0"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  build_config:
    dependency: transitive
    description:
      name: build_config
      sha256: bf80fcfb46a29945b423bd9aad884590fb1dc69b330a4d4700cac476af1708d1
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  build_daemon:
    dependency: transitive
    description:
      name: build_daemon
      sha256: "79b2aef6ac2ed00046867ed354c88778c9c0f029df8a20fe10b5436826721ef9"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  build_resolvers:
    dependency: transitive
    description:
      name: build_resolvers
      sha256: "339086358431fa15d7eca8b6a36e5d783728cf025e559b834f4609a1fcfb7b0a"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  build_runner:
    dependency: "direct dev"
    description:
      name: build_runner
      sha256: "028819cfb90051c6b5440c7e574d1896f8037e3c96cf17aaeb054c9311cfbf4d"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.13"
  build_runner_core:
    dependency: transitive
    description:
      name: build_runner_core
      sha256: f8126682b87a7282a339b871298cc12009cb67109cfa1614d6436fb0289193e0
      url: "https://pub.dev"
    source: hosted
    version: "7.3.2"
  built_collection:
    dependency: transitive
    description:
      name: built_collection
      sha256: "376e3dd27b51ea877c28d525560790aee2e6fbb5f20e2f85d5081027d94e2100"
      url: "https://pub.dev"
    source: hosted
    version: "5.1.1"
  built_value:
    dependency: transitive
    description:
      name: built_value
      sha256: c7913a9737ee4007efedaffc968c049fd0f3d0e49109e778edc10de9426005cb
      url: "https://pub.dev"
    source: hosted
    version: "8.9.2"
  carousel_slider:
    dependency: "direct main"
    description:
      name: carousel_slider
      sha256: "7b006ec356205054af5beaef62e2221160ea36b90fb70a35e4deacd49d0349ae"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.0"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  checked_yaml:
    dependency: transitive
    description:
      name: checked_yaml
      sha256: feb6bed21949061731a7a75fc5d2aa727cf160b91af9a3e464c5e3a32e28b5ff
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  cloud_firestore:
    dependency: "direct main"
    description:
      name: cloud_firestore
      sha256: bdc7607e9169ee3ce736bbbe6a81c2a6cb15c41379346b74f77f8e641211a17f
      url: "https://pub.dev"
    source: hosted
    version: "5.4.4"
  cloud_firestore_platform_interface:
    dependency: transitive
    description:
      name: cloud_firestore_platform_interface
      sha256: "884fa34c6be2d9c7c1f4af86f90f36c0a3b3afef585a12b350a5d15368e7ec7a"
      url: "https://pub.dev"
    source: hosted
    version: "6.4.3"
  cloud_firestore_web:
    dependency: transitive
    description:
      name: cloud_firestore_web
      sha256: "6e621bbcc999f32db0bc6bfcb18d9991617ec20f8d6bf51b6a1571f5c324fafd"
      url: "https://pub.dev"
    source: hosted
    version: "4.3.2"
  code_builder:
    dependency: transitive
    description:
      name: code_builder
      sha256: "0ec10bf4a89e4c613960bf1e8b42c64127021740fb21640c29c909826a5eea3e"
      url: "https://pub.dev"
    source: hosted
    version: "4.10.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
      url: "https://pub.dev"
    source: hosted
    version: "1.18.0"
  connectivity_plus:
    dependency: "direct main"
    description:
      name: connectivity_plus
      sha256: "224a77051d52a11fbad53dd57827594d3bd24f945af28bd70bab376d68d437f0"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.2"
  connectivity_plus_platform_interface:
    dependency: transitive
    description:
      name: connectivity_plus_platform_interface
      sha256: cf1d1c28f4416f8c654d7dc3cd638ec586076255d407cef3ddbdaf178272a71a
      url: "https://pub.dev"
    source: hosted
    version: "1.2.4"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: b30acd5944035672bc15c6b7a8b47d773e41e2f17de064350988c5d02adb1c68
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  cross_file:
    dependency: transitive
    description:
      name: cross_file
      sha256: "7caf6a750a0c04effbb52a676dce9a4a592e10ad35c34d6d2d0e4811160d5670"
      url: "https://pub.dev"
    source: hosted
    version: "0.3.4+2"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: "1e445881f28f22d6140f181e07737b22f1e099a5e1ff94b0af2f9e4a463f4855"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.6"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
      url: "https://pub.dev"
    source: hosted
    version: "1.0.8"
  dart_style:
    dependency: transitive
    description:
      name: dart_style
      sha256: "1efa911ca7086affd35f463ca2fc1799584fb6aa89883cf0af8e3664d6a02d55"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  dartx:
    dependency: transitive
    description:
      name: dartx
      sha256: "8b25435617027257d43e6508b5fe061012880ddfdaa75a71d607c3de2a13d244"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  dbus:
    dependency: transitive
    description:
      name: dbus
      sha256: "365c771ac3b0e58845f39ec6deebc76e3276aa9922b0cc60840712094d9047ac"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.10"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: "16ed7b077ef01ad6170a3d0c57caa4a112a38d7a2ed5602e0aca9ca6f3d98da6"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.3"
  file:
    dependency: transitive
    description:
      name: file
      sha256: a3b4f84adafef897088c160faf7dfffb7696046cb13ae90b508c2cbc95d3b8d4
      url: "https://pub.dev"
    source: hosted
    version: "7.0.1"
  file_selector_linux:
    dependency: transitive
    description:
      name: file_selector_linux
      sha256: "712ce7fab537ba532c8febdb1a8f167b32441e74acd68c3ccb2e36dcb52c4ab2"
      url: "https://pub.dev"
    source: hosted
    version: "0.9.3"
  file_selector_macos:
    dependency: transitive
    description:
      name: file_selector_macos
      sha256: "271ab9986df0c135d45c3cdb6bd0faa5db6f4976d3e4b437cf7d0f258d941bfc"
      url: "https://pub.dev"
    source: hosted
    version: "0.9.4+2"
  file_selector_platform_interface:
    dependency: transitive
    description:
      name: file_selector_platform_interface
      sha256: a3994c26f10378a039faa11de174d7b78eb8f79e4dd0af2a451410c1a5c3f66b
      url: "https://pub.dev"
    source: hosted
    version: "2.6.2"
  file_selector_windows:
    dependency: transitive
    description:
      name: file_selector_windows
      sha256: "8f5d2f6590d51ecd9179ba39c64f722edc15226cc93dcc8698466ad36a4a85a4"
      url: "https://pub.dev"
    source: hosted
    version: "0.9.3+3"
  firebase_auth:
    dependency: "direct main"
    description:
      name: firebase_auth
      sha256: d453acec0d958ba0e25d41a9901b32cb77d1535766903dea7a61b2788c304596
      url: "https://pub.dev"
    source: hosted
    version: "5.3.1"
  firebase_auth_platform_interface:
    dependency: transitive
    description:
      name: firebase_auth_platform_interface
      sha256: "78966c2ef774f5bf2a8381a307222867e9ece3509110500f7a138c115926aa65"
      url: "https://pub.dev"
    source: hosted
    version: "7.4.7"
  firebase_auth_web:
    dependency: transitive
    description:
      name: firebase_auth_web
      sha256: "77ad3b252badedd3f08dfa21a4c7fe244be96c6da3a4067f253b13ea5d32424c"
      url: "https://pub.dev"
    source: hosted
    version: "5.13.2"
  firebase_core:
    dependency: "direct main"
    description:
      name: firebase_core
      sha256: e59141ff83e70a9ba571a1f8733c5598cf57e6e68037ab185581d7fc0a436738
      url: "https://pub.dev"
    source: hosted
    version: "3.7.0"
  firebase_core_platform_interface:
    dependency: transitive
    description:
      name: firebase_core_platform_interface
      sha256: e30da58198a6d4b49d5bce4e852f985c32cb10db329ebef9473db2b9f09ce810
      url: "https://pub.dev"
    source: hosted
    version: "5.3.0"
  firebase_core_web:
    dependency: transitive
    description:
      name: firebase_core_web
      sha256: f967a7138f5d2ffb1ce15950e2a382924239eaa521150a8f144af34e68b3b3e5
      url: "https://pub.dev"
    source: hosted
    version: "2.18.1"
  firebase_database:
    dependency: "direct main"
    description:
      name: firebase_database
      sha256: "64f8076912139e83f3db3d853df5bffd4c6150a71ffef393584318efd4883f7c"
      url: "https://pub.dev"
    source: hosted
    version: "11.1.4"
  firebase_database_platform_interface:
    dependency: transitive
    description:
      name: firebase_database_platform_interface
      sha256: "750e9076a41bc78ce87b95f9d0548f224e5b0679009f6236bf5cf98884db60dd"
      url: "https://pub.dev"
    source: hosted
    version: "0.2.5+44"
  firebase_database_web:
    dependency: transitive
    description:
      name: firebase_database_web
      sha256: daf3fbde892ff5f2ea7469eff1ab22b7988fe96b637919fdec6890141eb51023
      url: "https://pub.dev"
    source: hosted
    version: "0.2.6+2"
  firebase_messaging:
    dependency: "direct main"
    description:
      name: firebase_messaging
      sha256: a988c6ab37fa5a6abf2f8087a44b765e058848ace6f3253fb1602d1d44a63747
      url: "https://pub.dev"
    source: hosted
    version: "15.1.4"
  firebase_messaging_platform_interface:
    dependency: transitive
    description:
      name: firebase_messaging_platform_interface
      sha256: "66aa477277baf2430904096234dd2095ad2e0248d0bfefc1b11695e68bf1790e"
      url: "https://pub.dev"
    source: hosted
    version: "4.5.47"
  firebase_messaging_web:
    dependency: transitive
    description:
      name: firebase_messaging_web
      sha256: "8b590d8c421dc4f63a28c6b9690a050424c28b99a54886ded4510c0806237130"
      url: "https://pub.dev"
    source: hosted
    version: "3.9.3"
  firebase_storage:
    dependency: "direct main"
    description:
      name: firebase_storage
      sha256: e00e2909e36f5e44f839fd77dff90ff764f7bb303ed548d43617014ce05c77c8
      url: "https://pub.dev"
    source: hosted
    version: "12.3.3"
  firebase_storage_platform_interface:
    dependency: transitive
    description:
      name: firebase_storage_platform_interface
      sha256: "462621bbdb5ab496518aa0f4785cb6db87763d5f1063aa228e1f65562937af1d"
      url: "https://pub.dev"
    source: hosted
    version: "5.1.31"
  firebase_storage_web:
    dependency: transitive
    description:
      name: firebase_storage_web
      sha256: d9221c943c1341ee2cba51857ddb5916686994b16b181e9e9d2e0d5a9056f9b7
      url: "https://pub.dev"
    source: hosted
    version: "3.10.3"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: b6dc7065e46c974bc7c5f143080a6764ec7a4be6da1285ececdc37be96de53be
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_animate:
    dependency: "direct main"
    description:
      name: flutter_animate
      sha256: "7c8a6594a9252dad30cc2ef16e33270b6248c4dedc3b3d06c86c4f3f4dc05ae5"
      url: "https://pub.dev"
    source: hosted
    version: "4.5.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: "3f41d009ba7172d5ff9be5f6e6e6abb4300e263aab8866d2a0842ed2a70f8f0c"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  flutter_local_notifications:
    dependency: "direct main"
    description:
      name: flutter_local_notifications
      sha256: ef41ae901e7529e52934feba19ed82827b11baa67336829564aeab3129460610
      url: "https://pub.dev"
    source: hosted
    version: "18.0.1"
  flutter_local_notifications_linux:
    dependency: transitive
    description:
      name: flutter_local_notifications_linux
      sha256: "8f685642876742c941b29c32030f6f4f6dacd0e4eaecb3efbb187d6a3812ca01"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.0"
  flutter_local_notifications_platform_interface:
    dependency: transitive
    description:
      name: flutter_local_notifications_platform_interface
      sha256: "6c5b83c86bf819cdb177a9247a3722067dd8cc6313827ce7c77a4b238a26fd52"
      url: "https://pub.dev"
    source: hosted
    version: "8.0.0"
  flutter_localizations:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_plugin_android_lifecycle:
    dependency: transitive
    description:
      name: flutter_plugin_android_lifecycle
      sha256: "9b78450b89f059e96c9ebb355fa6b3df1d6b330436e0b885fb49594c41721398"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.23"
  flutter_rating_bar:
    dependency: "direct main"
    description:
      name: flutter_rating_bar
      sha256: d2af03469eac832c591a1eba47c91ecc871fe5708e69967073c043b2d775ed93
      url: "https://pub.dev"
    source: hosted
    version: "4.0.1"
  flutter_secure_storage:
    dependency: "direct main"
    description:
      name: flutter_secure_storage
      sha256: "165164745e6afb5c0e3e3fcc72a012fb9e58496fb26ffb92cf22e16a821e85d0"
      url: "https://pub.dev"
    source: hosted
    version: "9.2.2"
  flutter_secure_storage_linux:
    dependency: transitive
    description:
      name: flutter_secure_storage_linux
      sha256: "4d91bfc23047422cbcd73ac684bc169859ee766482517c22172c86596bf1464b"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  flutter_secure_storage_macos:
    dependency: transitive
    description:
      name: flutter_secure_storage_macos
      sha256: "1693ab11121a5f925bbea0be725abfcfbbcf36c1e29e571f84a0c0f436147a81"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  flutter_secure_storage_platform_interface:
    dependency: transitive
    description:
      name: flutter_secure_storage_platform_interface
      sha256: cf91ad32ce5adef6fba4d736a542baca9daf3beac4db2d04be350b87f69ac4a8
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  flutter_secure_storage_web:
    dependency: transitive
    description:
      name: flutter_secure_storage_web
      sha256: f4ebff989b4f07b2656fb16b47852c0aab9fed9b4ec1c70103368337bc1886a9
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  flutter_secure_storage_windows:
    dependency: transitive
    description:
      name: flutter_secure_storage_windows
      sha256: b20b07cb5ed4ed74fc567b78a72936203f587eba460af1df11281c9326cd3709
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  flutter_shaders:
    dependency: transitive
    description:
      name: flutter_shaders
      sha256: "34794acadd8275d971e02df03afee3dee0f98dbfb8c4837082ad0034f612a3e2"
      url: "https://pub.dev"
    source: hosted
    version: "0.1.3"
  flutter_staggered_grid_view:
    dependency: "direct main"
    description:
      name: flutter_staggered_grid_view
      sha256: f0b6d8c0fa7b4b444985cdde68492c0138a4fb6fc57a641b24cb234b7ee0f5c4
      url: "https://pub.dev"
    source: hosted
    version: "0.4.1"
  flutter_stripe:
    dependency: "direct main"
    description:
      name: flutter_stripe
      sha256: acbefd9503d9c2e69a544ba84b0924dde372d9a016cc4f796a816c9df1b5fb6f
      url: "https://pub.dev"
    source: hosted
    version: "11.2.0"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  fluttertoast:
    dependency: "direct main"
    description:
      name: fluttertoast
      sha256: "95f349437aeebe524ef7d6c9bde3e6b4772717cf46a0eb6a3ceaddc740b297cc"
      url: "https://pub.dev"
    source: hosted
    version: "8.2.8"
  freezed_annotation:
    dependency: transitive
    description:
      name: freezed_annotation
      sha256: c2e2d632dd9b8a2b7751117abcfc2b4888ecfe181bd9fca7170d9ef02e595fe2
      url: "https://pub.dev"
    source: hosted
    version: "2.4.4"
  frontend_server_client:
    dependency: transitive
    description:
      name: frontend_server_client
      sha256: f64a0333a82f30b0cca061bc3d143813a486dc086b574bfb233b7c1372427694
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  geocoding:
    dependency: "direct main"
    description:
      name: geocoding
      sha256: d580c801cba9386b4fac5047c4c785a4e19554f46be42f4f5e5b7deacd088a66
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  geocoding_android:
    dependency: transitive
    description:
      name: geocoding_android
      sha256: "1b13eca79b11c497c434678fed109c2be020b158cec7512c848c102bc7232603"
      url: "https://pub.dev"
    source: hosted
    version: "3.3.1"
  geocoding_ios:
    dependency: transitive
    description:
      name: geocoding_ios
      sha256: "94ddba60387501bd1c11e18dca7c5a9e8c645d6e3da9c38b9762434941870c24"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  geocoding_platform_interface:
    dependency: transitive
    description:
      name: geocoding_platform_interface
      sha256: "8c2c8226e5c276594c2e18bfe88b19110ed770aeb7c1ab50ede570be8b92229b"
      url: "https://pub.dev"
    source: hosted
    version: "3.2.0"
  geolocator:
    dependency: "direct main"
    description:
      name: geolocator
      sha256: "0ec58b731776bc43097fcf751f79681b6a8f6d3bc737c94779fe9f1ad73c1a81"
      url: "https://pub.dev"
    source: hosted
    version: "13.0.1"
  geolocator_android:
    dependency: transitive
    description:
      name: geolocator_android
      sha256: "7aefc530db47d90d0580b552df3242440a10fe60814496a979aa67aa98b1fd47"
      url: "https://pub.dev"
    source: hosted
    version: "4.6.1"
  geolocator_apple:
    dependency: transitive
    description:
      name: geolocator_apple
      sha256: bc2aca02423ad429cb0556121f56e60360a2b7d694c8570301d06ea0c00732fd
      url: "https://pub.dev"
    source: hosted
    version: "2.3.7"
  geolocator_platform_interface:
    dependency: transitive
    description:
      name: geolocator_platform_interface
      sha256: "386ce3d9cce47838355000070b1d0b13efb5bc430f8ecda7e9238c8409ace012"
      url: "https://pub.dev"
    source: hosted
    version: "4.2.4"
  geolocator_web:
    dependency: transitive
    description:
      name: geolocator_web
      sha256: "2ed69328e05cd94e7eb48bb0535f5fc0c0c44d1c4fa1e9737267484d05c29b5e"
      url: "https://pub.dev"
    source: hosted
    version: "4.1.1"
  geolocator_windows:
    dependency: transitive
    description:
      name: geolocator_windows
      sha256: "53da08937d07c24b0d9952eb57a3b474e29aae2abf9dd717f7e1230995f13f0e"
      url: "https://pub.dev"
    source: hosted
    version: "0.2.3"
  get_it:
    dependency: "direct main"
    description:
      name: get_it
      sha256: d85128a5dae4ea777324730dc65edd9c9f43155c109d5cc0a69cab74139fbac1
      url: "https://pub.dev"
    source: hosted
    version: "7.7.0"
  glob:
    dependency: transitive
    description:
      name: glob
      sha256: "0e7014b3b7d4dac1ca4d6114f82bf1782ee86745b9b42a92c9289c23d8a0ab63"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  graphs:
    dependency: transitive
    description:
      name: graphs
      sha256: "741bbf84165310a68ff28fe9e727332eef1407342fca52759cb21ad8177bb8d0"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  http:
    dependency: transitive
    description:
      name: http
      sha256: b9c29a161230ee03d3ccf545097fccd9b87a5264228c5d348202e0f0c28f9010
      url: "https://pub.dev"
    source: hosted
    version: "1.2.2"
  http_multi_server:
    dependency: transitive
    description:
      name: http_multi_server
      sha256: "97486f20f9c2f7be8f514851703d0119c3596d14ea63227af6f7a481ef2b2f8b"
      url: "https://pub.dev"
    source: hosted
    version: "3.2.1"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  image_picker:
    dependency: "direct main"
    description:
      name: image_picker
      sha256: "021834d9c0c3de46bf0fe40341fa07168407f694d9b2bb18d532dc1261867f7a"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  image_picker_android:
    dependency: transitive
    description:
      name: image_picker_android
      sha256: d34e0d9e024e81321b2aeed7b202ec6181cc282e6a1c0c0b4e6ad07ef1065d82
      url: "https://pub.dev"
    source: hosted
    version: "0.8.12+16"
  image_picker_for_web:
    dependency: transitive
    description:
      name: image_picker_for_web
      sha256: "65d94623e15372c5c51bebbcb820848d7bcb323836e12dfdba60b5d3a8b39e50"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.5"
  image_picker_ios:
    dependency: transitive
    description:
      name: image_picker_ios
      sha256: "4f0568120c6fcc0aaa04511cb9f9f4d29fc3d0139884b1d06be88dcec7641d6b"
      url: "https://pub.dev"
    source: hosted
    version: "0.8.12+1"
  image_picker_linux:
    dependency: transitive
    description:
      name: image_picker_linux
      sha256: "4ed1d9bb36f7cd60aa6e6cd479779cc56a4cb4e4de8f49d487b1aaad831300fa"
      url: "https://pub.dev"
    source: hosted
    version: "0.2.1+1"
  image_picker_macos:
    dependency: transitive
    description:
      name: image_picker_macos
      sha256: "3f5ad1e8112a9a6111c46d0b57a7be2286a9a07fc6e1976fdf5be2bd31d4ff62"
      url: "https://pub.dev"
    source: hosted
    version: "0.2.1+1"
  image_picker_platform_interface:
    dependency: transitive
    description:
      name: image_picker_platform_interface
      sha256: "9ec26d410ff46f483c5519c29c02ef0e02e13a543f882b152d4bfd2f06802f80"
      url: "https://pub.dev"
    source: hosted
    version: "2.10.0"
  image_picker_windows:
    dependency: transitive
    description:
      name: image_picker_windows
      sha256: "6ad07afc4eb1bc25f3a01084d28520496c4a3bb0cb13685435838167c9dcedeb"
      url: "https://pub.dev"
    source: hosted
    version: "0.2.1+1"
  intl:
    dependency: "direct main"
    description:
      name: intl
      sha256: d6f56758b7d3014a48af9701c085700aac781a92a87a62b1333b46d8879661cf
      url: "https://pub.dev"
    source: hosted
    version: "0.19.0"
  io:
    dependency: transitive
    description:
      name: io
      sha256: "2ec25704aba361659e10e3e5f5d672068d332fc8ac516421d483a11e5cbd061e"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.4"
  isar:
    dependency: "direct main"
    description:
      name: isar
      sha256: "99165dadb2cf2329d3140198363a7e7bff9bbd441871898a87e26914d25cf1ea"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0+1"
  isar_flutter_libs:
    dependency: "direct main"
    description:
      name: isar_flutter_libs
      sha256: bc6768cc4b9c61aabff77152e7f33b4b17d2fc93134f7af1c3dd51500fe8d5e8
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0+1"
  isar_generator:
    dependency: "direct dev"
    description:
      name: isar_generator
      sha256: "76c121e1295a30423604f2f819bc255bc79f852f3bc8743a24017df6068ad133"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0+1"
  js:
    dependency: transitive
    description:
      name: js
      sha256: f2c445dce49627136094980615a031419f7f3eb393237e4ecd97ac15dea343f3
      url: "https://pub.dev"
    source: hosted
    version: "0.6.7"
  json_annotation:
    dependency: "direct main"
    description:
      name: json_annotation
      sha256: "1ce844379ca14835a50d2f019a3099f419082cfdd231cd86a142af94dd5c6bb1"
      url: "https://pub.dev"
    source: hosted
    version: "4.9.0"
  json_serializable:
    dependency: "direct dev"
    description:
      name: json_serializable
      sha256: ea1432d167339ea9b5bb153f0571d0039607a873d6e04e0117af043f14a1fd4b
      url: "https://pub.dev"
    source: hosted
    version: "6.8.0"
  leak_tracker:
    dependency: transitive
    description:
      name: leak_tracker
      sha256: "3f87a60e8c63aecc975dda1ceedbc8f24de75f09e4856ea27daf8958f2f0ce05"
      url: "https://pub.dev"
    source: hosted
    version: "10.0.5"
  leak_tracker_flutter_testing:
    dependency: transitive
    description:
      name: leak_tracker_flutter_testing
      sha256: "932549fb305594d82d7183ecd9fa93463e9914e1b67cacc34bc40906594a1806"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.5"
  leak_tracker_testing:
    dependency: transitive
    description:
      name: leak_tracker_testing
      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: "976c774dd944a42e83e2467f4cc670daef7eed6295b10b36ae8c85bcbf828235"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  localstorage:
    dependency: "direct main"
    description:
      name: localstorage
      sha256: "6340acefdd3a969cceb044a69cde2dc5877c5b861b2e02d0803930ed483dbe91"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.0"
  logging:
    dependency: transitive
    description:
      name: logging
      sha256: c8245ada5f1717ed44271ed1c26b8ce85ca3228fd2ffdb75468ab01979309d61
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16+1"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec
      url: "https://pub.dev"
    source: hosted
    version: "0.11.1"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: bdb68674043280c3428e9ec998512fb681678676b3c54e773629ffe74419f8c7
      url: "https://pub.dev"
    source: hosted
    version: "1.15.0"
  mime:
    dependency: transitive
    description:
      name: mime
      sha256: "801fd0b26f14a4a58ccb09d5892c3fbdeff209594300a542492cf13fba9d247a"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.6"
  nested:
    dependency: transitive
    description:
      name: nested
      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  nm:
    dependency: transitive
    description:
      name: nm
      sha256: "2c9aae4127bdc8993206464fcc063611e0e36e72018696cd9631023a31b24254"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.0"
  number_inc_dec:
    dependency: "direct main"
    description:
      name: number_inc_dec
      sha256: af0a35f923a2e67532bc6579e8fbf0093be8ea185e48bb543db4e3e355017ec5
      url: "https://pub.dev"
    source: hosted
    version: "0.8.0"
  package_config:
    dependency: transitive
    description:
      name: package_config
      sha256: "1c5b77ccc91e4823a5af61ee74e6b972db1ef98c2ff5a18d3161c982a55448bd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.0"
  path_provider:
    dependency: "direct main"
    description:
      name: path_provider
      sha256: "50c5dd5b6e1aaf6fb3a78b33f6aa3afca52bf903a8a5298f53101fdaee55bbcd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.5"
  path_provider_android:
    dependency: transitive
    description:
      name: path_provider_android
      sha256: c464428172cb986b758c6d1724c603097febb8fb855aa265aeecc9280c294d4a
      url: "https://pub.dev"
    source: hosted
    version: "2.2.12"
  path_provider_foundation:
    dependency: transitive
    description:
      name: path_provider_foundation
      sha256: f234384a3fdd67f989b4d54a5d73ca2a6c422fa55ae694381ae0f4375cd1ea16
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  petitparser:
    dependency: transitive
    description:
      name: petitparser
      sha256: c15605cd28af66339f8eb6fbe0e541bfe2d1b72d5825efc6598f3e0a31b9ad27
      url: "https://pub.dev"
    source: hosted
    version: "6.0.2"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "9b71283fc13df574056616011fb138fd3b793ea47cc509c189a6c3fa5f8a1a65"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.5"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pool:
    dependency: transitive
    description:
      name: pool
      sha256: "20fe868b6314b322ea036ba325e6fc0711a22948856475e2c2b6306e8ab39c2a"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.1"
  provider:
    dependency: "direct main"
    description:
      name: provider
      sha256: c8a055ee5ce3fd98d6fc872478b03823ffdb448699c6ebdbbc71d59b596fd48c
      url: "https://pub.dev"
    source: hosted
    version: "6.1.2"
  pub_semver:
    dependency: transitive
    description:
      name: pub_semver
      sha256: "40d3ab1bbd474c4c2328c91e3a7df8c6dd629b79ece4c4bd04bee496a224fb0c"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  pubspec_parse:
    dependency: transitive
    description:
      name: pubspec_parse
      sha256: c799b721d79eb6ee6fa56f00c04b472dcd44a30d258fac2174a6ec57302678f8
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  shared_preferences:
    dependency: "direct main"
    description:
      name: shared_preferences
      sha256: "746e5369a43170c25816cc472ee016d3a66bc13fcf430c0bc41ad7b4b2922051"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  shared_preferences_android:
    dependency: transitive
    description:
      name: shared_preferences_android
      sha256: "3b9febd815c9ca29c9e3520d50ec32f49157711e143b7a4ca039eb87e8ade5ab"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.3"
  shared_preferences_foundation:
    dependency: transitive
    description:
      name: shared_preferences_foundation
      sha256: "07e050c7cd39bad516f8d64c455f04508d09df104be326d8c02551590a0d513d"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.3"
  shared_preferences_linux:
    dependency: transitive
    description:
      name: shared_preferences_linux
      sha256: "580abfd40f415611503cae30adf626e6656dfb2f0cee8f465ece7b6defb40f2f"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_platform_interface:
    dependency: transitive
    description:
      name: shared_preferences_platform_interface
      sha256: "57cbf196c486bc2cf1f02b85784932c6094376284b3ad5779d1b1c6c6a816b80"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_web:
    dependency: transitive
    description:
      name: shared_preferences_web
      sha256: d2ca4132d3946fec2184261726b355836a82c33d7d5b67af32692aff18a4684e
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  shared_preferences_windows:
    dependency: transitive
    description:
      name: shared_preferences_windows
      sha256: "94ef0f72b2d71bc3e700e025db3710911bd51a71cefb65cc609dd0d9a982e3c1"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shelf:
    dependency: transitive
    description:
      name: shelf
      sha256: ad29c505aee705f41a4d8963641f91ac4cee3c8fad5947e033390a7bd8180fa4
      url: "https://pub.dev"
    source: hosted
    version: "1.4.1"
  shelf_web_socket:
    dependency: transitive
    description:
      name: shelf_web_socket
      sha256: "073c147238594ecd0d193f3456a5fe91c4b0abbcc68bf5cd95b36c4e194ac611"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_gen:
    dependency: transitive
    description:
      name: source_gen
      sha256: "14658ba5f669685cd3d63701d01b31ea748310f7ab854e471962670abcf57832"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.0"
  source_helper:
    dependency: transitive
    description:
      name: source_helper
      sha256: "6adebc0006c37dd63fe05bca0a929b99f06402fc95aa35bf36d67f5c06de01fd"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.4"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  sprintf:
    dependency: transitive
    description:
      name: sprintf
      sha256: "1fc9ffe69d4df602376b52949af107d8f5703b77cda567c4d7d86a0693120f23"
      url: "https://pub.dev"
    source: hosted
    version: "7.0.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
      url: "https://pub.dev"
    source: hosted
    version: "1.11.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  stripe_android:
    dependency: transitive
    description:
      name: stripe_android
      sha256: "6d65446ac95b5e66535f38606b51e30961b1a3823cd19253902bc0992d6f3dcc"
      url: "https://pub.dev"
    source: hosted
    version: "11.2.1"
  stripe_ios:
    dependency: transitive
    description:
      name: stripe_ios
      sha256: "87444df75265c5e5056c1043a68a27945eb10f9909ea532da8d4d894bedf0c51"
      url: "https://pub.dev"
    source: hosted
    version: "11.2.0"
  stripe_platform_interface:
    dependency: transitive
    description:
      name: stripe_platform_interface
      sha256: b88542fa430aa716f120bab40ea93f81249f6b5a9fa6aa2176a57e1f03df86bc
      url: "https://pub.dev"
    source: hosted
    version: "11.2.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "5b8a98dafc4d5c4c9c72d8b31ab2b23fc13422348d2997120294d3bac86b4ddb"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.2"
  time:
    dependency: transitive
    description:
      name: time
      sha256: ad8e018a6c9db36cb917a031853a1aae49467a93e0d464683e029537d848c221
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  timezone:
    dependency: transitive
    description:
      name: timezone
      sha256: ffc9d5f4d1193534ef051f9254063fa53d588609418c84299956c3db9383587d
      url: "https://pub.dev"
    source: hosted
    version: "0.10.0"
  timing:
    dependency: transitive
    description:
      name: timing
      sha256: "70a3b636575d4163c477e6de42f247a23b315ae20e86442bebe32d3cabf61c32"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  url_launcher:
    dependency: "direct main"
    description:
      name: url_launcher
      sha256: "9d06212b1362abc2f0f0d78e6f09f726608c74e3b9462e8368bb03314aa8d603"
      url: "https://pub.dev"
    source: hosted
    version: "6.3.1"
  url_launcher_android:
    dependency: transitive
    description:
      name: url_launcher_android
      sha256: "8fc3bae0b68c02c47c5c86fa8bfa74471d42687b0eded01b78de87872db745e2"
      url: "https://pub.dev"
    source: hosted
    version: "6.3.12"
  url_launcher_ios:
    dependency: transitive
    description:
      name: url_launcher_ios
      sha256: e43b677296fadce447e987a2f519dcf5f6d1e527dc35d01ffab4fff5b8a7063e
      url: "https://pub.dev"
    source: hosted
    version: "6.3.1"
  url_launcher_linux:
    dependency: transitive
    description:
      name: url_launcher_linux
      sha256: e2b9622b4007f97f504cd64c0128309dfb978ae66adbe944125ed9e1750f06af
      url: "https://pub.dev"
    source: hosted
    version: "3.2.0"
  url_launcher_macos:
    dependency: transitive
    description:
      name: url_launcher_macos
      sha256: "769549c999acdb42b8bcfa7c43d72bf79a382ca7441ab18a808e101149daf672"
      url: "https://pub.dev"
    source: hosted
    version: "3.2.1"
  url_launcher_platform_interface:
    dependency: transitive
    description:
      name: url_launcher_platform_interface
      sha256: "552f8a1e663569be95a8190206a38187b531910283c3e982193e4f2733f01029"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  url_launcher_web:
    dependency: transitive
    description:
      name: url_launcher_web
      sha256: "772638d3b34c779ede05ba3d38af34657a05ac55b06279ea6edd409e323dca8e"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.3"
  url_launcher_windows:
    dependency: transitive
    description:
      name: url_launcher_windows
      sha256: "49c10f879746271804767cb45551ec5592cdab00ee105c06dddde1a98f73b185"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: a5be9ef6618a7ac1e964353ef476418026db906c4facdedaa299b7a2e71690ff
      url: "https://pub.dev"
    source: hosted
    version: "4.5.1"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  vm_service:
    dependency: transitive
    description:
      name: vm_service
      sha256: "5c5f338a667b4c644744b661f309fb8080bb94b18a7e91ef1dbd343bed00ed6d"
      url: "https://pub.dev"
    source: hosted
    version: "14.2.5"
  watcher:
    dependency: transitive
    description:
      name: watcher
      sha256: "3d2ad6751b3c16cf07c7fca317a1413b3f26530319181b37e3b9039b84fc01d8"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  web:
    dependency: transitive
    description:
      name: web
      sha256: cd3543bd5798f6ad290ea73d210f423502e71900302dde696f8bff84bf89a1cb
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  web_socket:
    dependency: transitive
    description:
      name: web_socket
      sha256: "3c12d96c0c9a4eec095246debcea7b86c0324f22df69893d538fcc6f1b8cce83"
      url: "https://pub.dev"
    source: hosted
    version: "0.1.6"
  web_socket_channel:
    dependency: transitive
    description:
      name: web_socket_channel
      sha256: "9f187088ed104edd8662ca07af4b124465893caf063ba29758f97af57e61da8f"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  win32:
    dependency: transitive
    description:
      name: win32
      sha256: "84ba388638ed7a8cb3445a320c8273136ab2631cd5f2c57888335504ddab1bc2"
      url: "https://pub.dev"
    source: hosted
    version: "5.8.0"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  xml:
    dependency: transitive
    description:
      name: xml
      sha256: b015a8ad1c488f66851d762d3090a21c600e479dc75e68328c52774040cf9226
      url: "https://pub.dev"
    source: hosted
    version: "6.5.0"
  xxh3:
    dependency: transitive
    description:
      name: xxh3
      sha256: cbeb0e1d10f4c6bf67b650f395eac0cc689425b5efc2ba0cc3d3e069a0beaeec
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: "75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
sdks:
  dart: ">=3.5.2 <4.0.0"
  flutter: ">=3.24.0"

================
File: pubspec.yaml
================
name: pamvotis_users_web
description: "the pamvotis app now on a website"
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.5.2

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8
  image_picker: ^1.1.2
  geolocator: ^13.0.1
  geocoding: ^3.0.0
  firebase_core:
  firebase_auth:
  firebase_database:
  firebase_storage: ^12.3.0
  cloud_firestore:
  shared_preferences: ^2.3.2
  carousel_slider: ^5.0.0
  flutter_staggered_grid_view: ^0.4.1
  number_inc_dec: ^0.8.0
  fluttertoast: ^8.2.8
  provider: ^6.1.2
  url_launcher: ^6.3.0
  intl: ^0.19.0
  flutter_animate: ^4.5.0
  flutter_rating_bar: ^4.0.1
  firebase_messaging: ^15.1.4
  flutter_local_notifications: ^18.0.1
  flutter_stripe: ^11.2.0
  localstorage: ^5.0.0
  isar: ^3.1.0+1
  get_it: ^7.6.4
  connectivity_plus: ^5.0.1
  json_annotation: ^4.9.0
  flutter_secure_storage: ^9.2.2
  path_provider: ^2.1.5
  isar_flutter_libs: ^3.1.0+1



dev_dependencies:
  isar_generator: ^3.1.0+1
  build_runner: ^2.4.6
  json_serializable: ^6.8.0
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^4.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  generate: true

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true


  assets:
    - images/

  fonts:
    - family: Lexend
      fonts:
        - asset: assets/fonts/Lexend-Regular.ttf

================
File: README.md
================
# pamvotis_users_web

the pamvotis app now on a website

## Getting Started

This project is a starting point for a Flutter application.

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)
- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)

For help getting started with Flutter development, view the
[online documentation](https://docs.flutter.dev/), which offers tutorials,
samples, guidance on mobile development, and a full API reference.
